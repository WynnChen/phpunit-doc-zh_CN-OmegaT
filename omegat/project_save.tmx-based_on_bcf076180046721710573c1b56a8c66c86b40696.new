<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="OmegaT-3.5.4" segtype="paragraph" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>"Behind the scenes", PHPUnit automatically generates a new PHP class that implements the desired behavior when the &lt;l0&gt;createMock()&lt;/l0&gt; method is used.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T084848Z" creationid="Wynn" creationdate="20160418T084848Z">
        <seg>“在幕后”，当使用了 &lt;l0&gt;createMock()&lt;/l0&gt; 方法时， PHPUnit 自动生成了一个新的 PHP 类来实现想要的行为。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Behind the scenes", PHPUnit automatically generates a new PHP class that implements the desired behavior when the &lt;l0&gt;getMock()&lt;/l0&gt; method is used.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T075150Z" creationid="Wynn" creationdate="20150327T075150Z">
        <seg>“在幕后”，当使用了 &lt;l0&gt;getMock()&lt;/l0&gt; 方法时， PHPUnit 自动生成了一个新的 PHP 类来实现想要的行为。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Behind the scenes", PHPUnit automatically generates a new PHP class that implements the desired behavior when the &lt;l0&gt;getMock()&lt;/l0&gt; method is used. The generated test double class can be configured through the optional arguments of the &lt;l1&gt;getMock()&lt;/l1&gt; method.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T044814Z" creationid="Wynn" creationdate="20150330T043941Z">
        <seg>“在幕后”，当使用了 &lt;l0&gt;getMock()&lt;/l0&gt; 方法时， PHPUnit 自动生成了一个新的 PHP 类来实现想要的行为。所生成的测试替身类可以通过 &lt;l1&gt;getMock()&lt;/l1&gt; 的可选参数来进行配置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"phpunit/dbunit": "&gt;=1.2"</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T100737Z" creationid="Wynn" creationdate="20150319T100737Z">
        <seg>"phpunit/dbunit": "&gt;=1.2"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"phpunit/php-invoker": "*"</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T100727Z" creationid="Wynn" creationdate="20150319T100727Z">
        <seg>"phpunit/php-invoker": "*"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"phpunit/phpunit-selenium": "&gt;=1.2"</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T100757Z" creationid="Wynn" creationdate="20150319T100757Z">
        <seg>"phpunit/phpunit-selenium": "&gt;=1.2"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#!/usr/bin/env bash
clean=1 # Delete phpunit.phar after the tests are complete?
aftercmd="php phpunit.phar --bootstrap bootstrap.php src/tests"
gpg --fingerprint D8406D0D82947747293778314AA394086372C20A
if [ $? -ne 0 ]; then
    echo -e "\033[33mDownloading PGP Public Key...\033[0m"
    gpg --recv-keys D8406D0D82947747293778314AA394086372C20A
    # Sebastian Bergmann &lt;sb@sebastian-bergmann.de&gt;
    gpg --fingerprint D8406D0D82947747293778314AA394086372C20A
    if [ $? -ne 0 ]; then
        echo -e "\033[31mCould not download PGP public key for verification\033[0m"
        exit
    fi
fi

if [ "$clean" -eq 1 ]; then
    # Let's clean them up, if they exist
    if [ -f phpunit.phar ]; then
        rm -f phpunit.phar
    fi
    if [ -f phpunit.phar.asc ]; then
        rm -f phpunit.phar.asc
    fi
fi

# Let's grab the latest release and its signature
if [ ! -f phpunit.phar ]; then
    wget https://phar.phpunit.de/phpunit.phar
fi
if [ ! -f phpunit.phar.asc ]; then
    wget https://phar.phpunit.de/phpunit.phar.asc
fi

# Verify before running
gpg --verify phpunit.phar.asc phpunit.phar
if [ $? -eq 0 ]; then
    echo
    echo -e "\033[33mBegin Unit Testing\033[0m"
    # Run the testing suite
    `$after_cmd`
    # Cleanup
    if [ "$clean" -eq 1 ]; then
        echo -e "\033[32mCleaning Up!\033[0m"
        rm -f phpunit.phar
        rm -f phpunit.phar.asc
    fi
else
    echo
    chmod -x phpunit.phar
    mv phpunit.phar /tmp/bad-phpunit.phar
    mv phpunit.phar.asc /tmp/bad-phpunit.phar.asc
    echo -e "\033[31mSignature did not match! PHPUnit has been moved to /tmp/bad-phpunit.phar\033[0m"
    exit 1
fi</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150416T081055Z" creationid="Wynn" creationdate="20150416T081055Z">
        <seg>#!/usr/bin/env bash
clean=1 # 是否在测试完成之后删除 phpunit.phar ？
aftercmd="php phpunit.phar --bootstrap bootstrap.php src/tests"
gpg --fingerprint D8406D0D82947747293778314AA394086372C20A
if [ $? -ne 0 ]; then
    echo -e "\033[33mDownloading PGP Public Key...\033[0m"
    gpg --recv-keys D8406D0D82947747293778314AA394086372C20A
    # Sebastian Bergmann &lt;sb@sebastian-bergmann.de&gt;
    gpg --fingerprint D8406D0D82947747293778314AA394086372C20A
    if [ $? -ne 0 ]; then
        echo -e "\033[31mCould not download PGP public key for verification\033[0m"
        exit
    fi
fi

if [ "$clean" -eq 1 ]; then
    # 如果存在就清理掉
    if [ -f phpunit.phar ]; then
        rm -f phpunit.phar
    fi
    if [ -f phpunit.phar.asc ]; then
        rm -f phpunit.phar.asc
    fi
fi

# 抓取最新的发行版和对应的签名
if [ ! -f phpunit.phar ]; then
    wget https://phar.phpunit.de/phpunit.phar
fi
if [ ! -f phpunit.phar.asc ]; then
    wget https://phar.phpunit.de/phpunit.phar.asc
fi

# 在运行前先校验
gpg --verify phpunit.phar.asc phpunit.phar
if [ $? -eq 0 ]; then
    echo
    echo -e "\033[33mBegin Unit Testing\033[0m"
    # 运行测试套件
    `$after_cmd`
    # 清理
    if [ "$clean" -eq 1 ]; then
        echo -e "\033[32mCleaning Up!\033[0m"
        rm -f phpunit.phar
        rm -f phpunit.phar.asc
    fi
else
    echo
    chmod -x phpunit.phar
    mv phpunit.phar /tmp/bad-phpunit.phar
    mv phpunit.phar.asc /tmp/bad-phpunit.phar.asc
    echo -e "\033[31mSignature did not match! PHPUnit has been moved to /tmp/bad-phpunit.phar\033[0m"
    exit 1
fi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$backupGlobalsBlacklist</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T085737Z" creationid="Wynn" creationdate="20150319T085737Z">
        <seg>$backupGlobalsBlacklist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$backupStaticAttributesBlacklist</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T085922Z" creationid="Wynn" creationdate="20150319T085922Z">
        <seg>$backupStaticAttributesBlacklist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$listener = new MyListener(
    ['Sebastian'],
    22,
    'April',
    19.78,
    null,
    new stdClass
);</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083254Z" creationid="Wynn" creationdate="20160418T083254Z">
        <seg>$listener = new MyListener(
    ['Sebastian'],
    22,
    'April',
    19.78,
    null,
    new stdClass
);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$listener = new MyListener(
  array('Sebastian'),
  22,
  'April',
  19.78,
  NULL,
  new stdClass
);</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150310T075323Z" creationid="Wynn" creationdate="20150310T075323Z">
        <seg>$listener = new MyListener(
  array('Sebastian'),
  22,
  'April',
  19.78,
  NULL,
  new stdClass
);</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--bootstrap</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T100511Z" creationid="Wynn" creationdate="20150327T100511Z">
        <seg>--bootstrap</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--colors</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095748Z" creationid="Wynn" creationdate="20150327T095748Z">
        <seg>--colors</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--columns</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150924T034006Z" creationid="Wynn" creationdate="20150924T034006Z">
        <seg>--columns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--coverage-clover</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093145Z" creationid="Wynn" creationdate="20150327T093145Z">
        <seg>--coverage-clover</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--coverage-clover /tmp/coverage.xml</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T095319Z" creationid="Wynn" creationdate="20150309T095319Z">
        <seg>--coverage-clover /tmp/coverage.xml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--coverage-crap4j</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093154Z" creationid="Wynn" creationdate="20150327T093154Z">
        <seg>--coverage-crap4j</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--coverage-html</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093251Z" creationid="Wynn" creationdate="20150327T093251Z">
        <seg>--coverage-html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--coverage-html /tmp/report</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T095318Z" creationid="Wynn" creationdate="20150309T095318Z">
        <seg>--coverage-html /tmp/report</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--coverage-php</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093300Z" creationid="Wynn" creationdate="20150327T093300Z">
        <seg>--coverage-php</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--coverage-php /tmp/coverage.serialized</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T095321Z" creationid="Wynn" creationdate="20150309T095321Z">
        <seg>--coverage-php /tmp/coverage.serialized</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--coverage-text</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T095321Z" creationid="Wynn" creationdate="20150309T095321Z">
        <seg>--coverage-text</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--debug</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095956Z" creationid="Wynn" creationdate="20150327T095956Z">
        <seg>--debug</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--disallow-test-output</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095507Z" creationid="Wynn" creationdate="20150327T095507Z">
        <seg>--disallow-test-output</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--disallow-todo-tests</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095537Z" creationid="Wynn" creationdate="20150327T095537Z">
        <seg>--disallow-todo-tests</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--enforce-time-limit</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095556Z" creationid="Wynn" creationdate="20150327T095556Z">
        <seg>--enforce-time-limit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--exclude-group</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093838Z" creationid="Wynn" creationdate="20150327T093838Z">
        <seg>--exclude-group</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--exclude-group name</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093623Z" creationid="Wynn" creationdate="20150309T093623Z">
        <seg>--exclude-group name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093514Z" creationid="Wynn" creationdate="20150327T093514Z">
        <seg>--filter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter '#2'</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093735Z" creationid="Wynn" creationdate="20150327T093735Z">
        <seg>--filter '#2'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter '#2-4'</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093740Z" creationid="Wynn" creationdate="20150327T093740Z">
        <seg>--filter '#2-4'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter '/::testMethod .*"my named data"/'</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093715Z" creationid="Wynn" creationdate="20150327T093715Z">
        <seg>--filter '/::testMethod .*"my named data"/'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter '/::testMethod .*#(5|6|7)$/'</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093723Z" creationid="Wynn" creationdate="20150327T093723Z">
        <seg>--filter '/::testMethod .*#(5|6|7)$/'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter '/::testMethod .*#5$/'</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093715Z" creationid="Wynn" creationdate="20150327T093715Z">
        <seg>--filter '/::testMethod .*#5$/'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter '@my named data'</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093741Z" creationid="Wynn" creationdate="20150327T093741Z">
        <seg>--filter '@my named data'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter '@my.*data'</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093742Z" creationid="Wynn" creationdate="20150327T093742Z">
        <seg>--filter '@my.*data'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter 'TestNamespace\\TestCaseClass'</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093715Z" creationid="Wynn" creationdate="20150327T093715Z">
        <seg>--filter 'TestNamespace\\TestCaseClass'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter 'TestNamespace\\TestCaseClass::testMethod'</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093714Z" creationid="Wynn" creationdate="20150327T093714Z">
        <seg>--filter 'TestNamespace\\TestCaseClass::testMethod'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter 'testMethod#2'</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093735Z" creationid="Wynn" creationdate="20150327T093735Z">
        <seg>--filter 'testMethod#2'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter 'testMethod#2-4'</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093735Z" creationid="Wynn" creationdate="20150327T093735Z">
        <seg>--filter 'testMethod#2-4'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter 'testMethod@my named data'</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093741Z" creationid="Wynn" creationdate="20150327T093741Z">
        <seg>--filter 'testMethod@my named data'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter 'testMethod@my.*data'</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093741Z" creationid="Wynn" creationdate="20150327T093741Z">
        <seg>--filter 'testMethod@my.*data'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter TestCaseClass</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093715Z" creationid="Wynn" creationdate="20150327T093715Z">
        <seg>--filter TestCaseClass</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter TestNamespace</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093715Z" creationid="Wynn" creationdate="20150327T093715Z">
        <seg>--filter TestNamespace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--filter testMethod</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093715Z" creationid="Wynn" creationdate="20150327T093715Z">
        <seg>--filter testMethod</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--group</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093757Z" creationid="Wynn" creationdate="20150327T093757Z">
        <seg>--group</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--group name</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093517Z" creationid="Wynn" creationdate="20150309T093517Z">
        <seg>--group name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--include-path</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T100641Z" creationid="Wynn" creationdate="20150327T100641Z">
        <seg>--include-path</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--list-groups</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093903Z" creationid="Wynn" creationdate="20150327T093903Z">
        <seg>--list-groups</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--loader</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095957Z" creationid="Wynn" creationdate="20150327T095957Z">
        <seg>--loader</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--log-json</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093432Z" creationid="Wynn" creationdate="20150327T093432Z">
        <seg>--log-json</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--log-json /tmp/logfile.json</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T095322Z" creationid="Wynn" creationdate="20150309T095322Z">
        <seg>--log-json /tmp/logfile.json</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--log-junit</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093343Z" creationid="Wynn" creationdate="20150327T093343Z">
        <seg>--log-junit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--log-junit /tmp/logfile.xml</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T095326Z" creationid="Wynn" creationdate="20150309T095326Z">
        <seg>--log-junit /tmp/logfile.xml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--log-tap</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093407Z" creationid="Wynn" creationdate="20150327T093407Z">
        <seg>--log-tap</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--log-tap /tmp/logfile.tap</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T095324Z" creationid="Wynn" creationdate="20150309T095324Z">
        <seg>--log-tap /tmp/logfile.tap</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--no-configuration</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T100600Z" creationid="Wynn" creationdate="20150327T100600Z">
        <seg>--no-configuration</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--no-globals-backup</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095717Z" creationid="Wynn" creationdate="20150327T095717Z">
        <seg>--no-globals-backup</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--printer</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T100336Z" creationid="Wynn" creationdate="20150327T100336Z">
        <seg>--printer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--process-isolation</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095703Z" creationid="Wynn" creationdate="20150327T095703Z">
        <seg>--process-isolation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--repeat</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T100127Z" creationid="Wynn" creationdate="20150327T100127Z">
        <seg>--repeat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--report-useless-tests</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095349Z" creationid="Wynn" creationdate="20150327T095349Z">
        <seg>--report-useless-tests</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--static-backup</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095732Z" creationid="Wynn" creationdate="20150327T095732Z">
        <seg>--static-backup</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--stderr</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095920Z" creationid="Wynn" creationdate="20150327T095920Z">
        <seg>--stderr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--stop-on-error</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095937Z" creationid="Wynn" creationdate="20150327T095937Z">
        <seg>--stop-on-error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--stop-on-failure</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095939Z" creationid="Wynn" creationdate="20150327T095939Z">
        <seg>--stop-on-failure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--stop-on-incomplete</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095954Z" creationid="Wynn" creationdate="20150327T095954Z">
        <seg>--stop-on-incomplete</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--stop-on-risky</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095948Z" creationid="Wynn" creationdate="20150327T095948Z">
        <seg>--stop-on-risky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--stop-on-skipped</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095953Z" creationid="Wynn" creationdate="20150327T095953Z">
        <seg>--stop-on-skipped</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--strict</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095614Z" creationid="Wynn" creationdate="20150327T095614Z">
        <seg>--strict</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--strict-coverage</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095510Z" creationid="Wynn" creationdate="20150327T095510Z">
        <seg>--strict-coverage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--strict-global-state</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150416T083209Z" creationid="Wynn" creationdate="20150416T083209Z">
        <seg>--strict-global-state</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--tap</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T100132Z" creationid="Wynn" creationdate="20150327T100132Z">
        <seg>--tap</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--test-suffix</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093910Z" creationid="Wynn" creationdate="20150327T093910Z">
        <seg>--test-suffix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--testdox</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T100300Z" creationid="Wynn" creationdate="20150327T100300Z">
        <seg>--testdox</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--testdox-html /tmp/testdox.html</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T095327Z" creationid="Wynn" creationdate="20150309T095327Z">
        <seg>--testdox-html /tmp/testdox.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--testdox-text /tmp/testdox.txt</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T095402Z" creationid="Wynn" creationdate="20150309T095402Z">
        <seg>--testdox-text /tmp/testdox.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--testsuite</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093748Z" creationid="Wynn" creationdate="20150327T093748Z">
        <seg>--testsuite</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--verbose</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T095955Z" creationid="Wynn" creationdate="20150327T095955Z">
        <seg>--verbose</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-d</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T100654Z" creationid="Wynn" creationdate="20150327T100654Z">
        <seg>-d</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>.</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T092740Z" creationid="Wynn" creationdate="20150327T092740Z">
        <seg>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T031241Z" creationid="Wynn" creationdate="20150330T031241Z">
        <seg>...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/**
     * Generated from @assert (0, 0) == 0.
     */
    public function testAdd() {
        $o = new Calculator;
        $this-&gt;assertEquals(0, $o-&gt;add(0, 0));
    }</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T043434Z" creationid="Wynn" creationdate="20150330T043434Z">
        <seg>/**
     * Generated from @assert (0, 0) == 0.
     */
    public function testAdd() {
        $o = new Calculator;
        $this-&gt;assertEquals(0, $o-&gt;add(0, 0));
    }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/**
 * @backupGlobals disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @backupGlobals enabled
     */
    public function testThatInteractsWithGlobalVariables()
    {
        // ...
    }
}</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150228T082008Z" creationid="Wynn" creationdate="20150228T082008Z">
        <seg>/**
 * @backupGlobals disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @backupGlobals enabled
     */
    public function testThatInteractsWithGlobalVariables()
    {
        // ...
    }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/**
 * @backupGlobals disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    // ...
}</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092219Z" creationid="Wynn" creationdate="20150309T092219Z">
        <seg>/**
 * @backupGlobals disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    // ...
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/**
 * @backupStaticAttributes disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @backupStaticAttributes enabled
     */
    public function testThatInteractsWithStaticAttributes()
    {
        // ...
    }
}</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T025256Z" creationid="Wynn" creationdate="20150330T025256Z">
        <seg>/**
 * @backupStaticAttributes disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @backupStaticAttributes enabled
     */
    public function testThatInteractsWithStaticAttributes()
    {
        // ...
    }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/**
 * @backupStaticAttributes disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    // ...
}</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T025247Z" creationid="Wynn" creationdate="20150330T025247Z">
        <seg>/**
 * @backupStaticAttributes disabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    // ...
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/**
 * @backupStaticAttributes enabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @backupStaticAttributes disabled
     */
    public function testThatInteractsWithStaticAttributes()
    {
        // ...
    }
}</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092243Z" creationid="Wynn" creationdate="20150309T092243Z">
        <seg>/**
 * @backupStaticAttributes enabled
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    /**
     * @backupStaticAttributes disabled
     */
    public function testThatInteractsWithStaticAttributes()
    {
        // ...
    }
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/**
 * @covers BankAccount::deposit
 * @uses   Money
 */
public function testMoneyCanBeDepositedInAccount()
{
    // ...
}</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092756Z" creationid="Wynn" creationdate="20150309T092756Z">
        <seg>/**
 * @covers BankAccount::deposit
 * @uses   Money
 */
public function testMoneyCanBeDepositedInAccount()
{
    // ...
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/**
 * @covers BankAccount::getBalance
 */
public function testBalanceIsInitiallyZero()
{
    $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
}</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092530Z" creationid="Wynn" creationdate="20150309T092530Z">
        <seg>/**
 * @covers BankAccount::getBalance
 */
public function testBalanceIsInitiallyZero()
{
    $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/**
 * @runTestsInSeparateProcesses
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    // ...
}</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092738Z" creationid="Wynn" creationdate="20150309T092738Z">
        <seg>/**
 * @runTestsInSeparateProcesses
 */
class MyTest extends PHPUnit_Framework_TestCase
{
    // ...
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/**
 * @test
 */
public function initialBalanceShouldBe0()
{
    $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
}</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092750Z" creationid="Wynn" creationdate="20150309T092750Z">
        <seg>/**
 * @test
 */
public function initialBalanceShouldBe0()
{
    $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/path/to/my/test.phpt</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T093645Z" creationid="Wynn" creationdate="20150327T093645Z">
        <seg>/path/to/my/test.phpt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0
1</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T040911Z" creationid="Wynn" creationdate="20150330T040911Z">
        <seg>0
1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1. Clean-Up Database</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150313T071003Z" creationid="Wynn" creationdate="20150313T071003Z">
        <seg>1. 清理数据库</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2. Set up fixture</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150313T071214Z" creationid="Wynn" creationdate="20150313T071108Z">
        <seg>2. 建立基境</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2002</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093339Z" creationid="Wynn" creationdate="20150309T093339Z">
        <seg>2002</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2003</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093338Z" creationid="Wynn" creationdate="20150309T093338Z">
        <seg>2003</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2005</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093345Z" creationid="Wynn" creationdate="20150309T093345Z">
        <seg>2005</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2006</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093345Z" creationid="Wynn" creationdate="20150309T093345Z">
        <seg>2006</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2007</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093343Z" creationid="Wynn" creationdate="20150309T093343Z">
        <seg>2007</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2008</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093345Z" creationid="Wynn" creationdate="20150309T093345Z">
        <seg>2008</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2009</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093345Z" creationid="Wynn" creationdate="20150309T093345Z">
        <seg>2009</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2010</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093346Z" creationid="Wynn" creationdate="20150309T093346Z">
        <seg>2010</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2011</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093346Z" creationid="Wynn" creationdate="20150309T093346Z">
        <seg>2011</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2012</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093346Z" creationid="Wynn" creationdate="20150309T093346Z">
        <seg>2012</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2013</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093346Z" creationid="Wynn" creationdate="20150309T093346Z">
        <seg>2013</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2014</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093346Z" creationid="Wynn" creationdate="20150309T093346Z">
        <seg>2014</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2015</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093347Z" creationid="Wynn" creationdate="20150309T093347Z">
        <seg>2015</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3–5. Run Test, Verify outcome and Teardown</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150313T071201Z" creationid="Wynn" creationdate="20150313T071201Z">
        <seg>3–5. 运行测试、验证结果、并拆除基境</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
$ds = new PHPUnit_Extensions_Database_DataSet_QueryDataSet($this-&gt;getConnection());
$ds-&gt;addTable('guestbook');
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150317T074752Z" creationid="Wynn" creationdate="20150317T074752Z">
        <seg>&lt;?php
$ds = new PHPUnit_Extensions_Database_DataSet_QueryDataSet($this-&gt;getConnection());
$ds-&gt;addTable('guestbook');
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
$ds = new PHPUnit_Extensions_Database_DataSet_QueryDataSet($this-&gt;getConnection());
$ds-&gt;addTable('guestbook', 'SELECT * FROM guestbook');
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150317T074831Z" creationid="Wynn" creationdate="20150317T074831Z">
        <seg>&lt;?php
$ds = new PHPUnit_Extensions_Database_DataSet_QueryDataSet($this-&gt;getConnection());
$ds-&gt;addTable('guestbook', 'SELECT * FROM guestbook');
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
$ds = new PHPUnit_Extensions_Database_DataSet_QueryDataSet($this-&gt;getConnection());
$ds-&gt;addTable('guestbook', 'SELECT id, content FROM guestbook ORDER BY created DESC');
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150317T074904Z" creationid="Wynn" creationdate="20150317T074904Z">
        <seg>&lt;?php
$ds = new PHPUnit_Extensions_Database_DataSet_QueryDataSet($this-&gt;getConnection());
$ds-&gt;addTable('guestbook', 'SELECT id, content FROM guestbook ORDER BY created DESC');
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
$fixture = array();
// $fixture is expected to be empty.

$fixture[] = 'element';
// $fixture is expected to contain one element.
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T025848Z" creationid="Wynn" creationdate="20150330T025848Z">
        <seg>&lt;?php
$fixture = array();
// $fixture is expected to be empty.

$fixture[] = 'element';
// $fixture is expected to contain one element.
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
$fixture = array();
print count($fixture) . "\n";

$fixture[] = 'element';
print count($fixture) . "\n";
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T030109Z" creationid="Wynn" creationdate="20150330T030109Z">
        <seg>&lt;?php
$fixture = array();
print count($fixture) . "\n";

$fixture[] = 'element';
print count($fixture) . "\n";
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
$fixture = array();
print count($fixture) == 0 ? "ok\n" : "not ok\n";

$fixture[] = 'element';
print count($fixture) == 1 ? "ok\n" : "not ok\n";
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T030145Z" creationid="Wynn" creationdate="20150330T030145Z">
        <seg>&lt;?php
$fixture = array();
print count($fixture) == 0 ? "ok\n" : "not ok\n";

$fixture[] = 'element';
print count($fixture) == 1 ? "ok\n" : "not ok\n";
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
$queryTable = $this-&gt;getConnection()-&gt;createQueryTable(
    'guestbook', 'SELECT id, content, user FROM guestbook'
);
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T042200Z" creationid="Wynn" creationdate="20150319T042200Z">
        <seg>&lt;?php
$queryTable = $this-&gt;getConnection()-&gt;createQueryTable(
    'guestbook', 'SELECT id, content, user FROM guestbook'
);
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
/**
 * @codeCoverageIgnore
 */
class Foo
{
    public function bar()
    {
    }
}

class Bar
{
    /**
     * @codeCoverageIgnore
     */
    public function foo()
    {
    }
}

if (FALSE) {
    // @codeCoverageIgnoreStart
    print '*';
    // @codeCoverageIgnoreEnd
}

exit; // @codeCoverageIgnore
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093354Z" creationid="Wynn" creationdate="20150309T093354Z">
        <seg>&lt;?php
/**
 * @codeCoverageIgnore
 */
class Foo
{
    public function bar()
    {
    }
}

class Bar
{
    /**
     * @codeCoverageIgnore
     */
    public function foo()
    {
    }
}

if (FALSE) {
    // @codeCoverageIgnoreStart
    print '*';
    // @codeCoverageIgnoreEnd
}

exit; // @codeCoverageIgnore
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
/**
 * @codeCoverageIgnore
 */
class Foo
{
    public function bar()
    {
    }
}

class Bar
{
    /**
     * @codeCoverageIgnore
     */
    public function foo()
    {
    }
}

if (FALSE) {
    // @codeCoverageIgnoreStart
    print '*';
    // @codeCoverageIgnoreEnd
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T032729Z" creationid="Wynn" creationdate="20150330T032729Z">
        <seg>&lt;?php
/**
 * @codeCoverageIgnore
 */
class Foo
{
    public function bar()
    {
    }
}

class Bar
{
    /**
     * @codeCoverageIgnore
     */
    public function foo()
    {
    }
}

if (FALSE) {
    // @codeCoverageIgnoreStart
    print '*';
    // @codeCoverageIgnoreEnd
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
/**
 * @codeCoverageIgnore
 */
class Foo
{
    public function bar()
    {
    }
}

class Bar
{
    /**
     * @codeCoverageIgnore
     */
    public function foo()
    {
    }
}

if (false) {
    // @codeCoverageIgnoreStart
    print '*';
    // @codeCoverageIgnoreEnd
}

exit; // @codeCoverageIgnore
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083253Z" creationid="Wynn" creationdate="20160418T083253Z">
        <seg>&lt;?php
/**
 * @codeCoverageIgnore
 */
class Foo
{
    public function bar()
    {
    }
}

class Bar
{
    /**
     * @codeCoverageIgnore
     */
    public function foo()
    {
    }
}

if (false) {
    // @codeCoverageIgnoreStart
    print '*';
    // @codeCoverageIgnoreEnd
}

exit; // @codeCoverageIgnore
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
/**
 * @coversDefaultClass \Foo\CoveredClass
 */
class CoversDefaultClassTest extends PHPUnit_Framework_TestCase
{
    /**
     * @covers ::publicMethod
     */
    public function testSomething()
    {
        $o = new Foo\CoveredClass;
        $o-&gt;publicMethod();
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092552Z" creationid="Wynn" creationdate="20150309T092552Z">
        <seg>&lt;?php
/**
 * @coversDefaultClass \Foo\CoveredClass
 */
class CoversDefaultClassTest extends PHPUnit_Framework_TestCase
{
    /**
     * @covers ::publicMethod
     */
    public function testSomething()
    {
        $o = new Foo\CoveredClass;
        $o-&gt;publicMethod();
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
/**
 * @requires extension mysqli
 */
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    /**
     * @requires PHP 5.3
     */
    public function testConnection()
    {
        // Test requires the mysqli extension and PHP &gt;= 5.3
    }

    // ... All other tests require the mysqli extension
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T092759Z" creationid="Wynn" creationdate="20150319T092743Z">
        <seg>&lt;?php
/**
 * @requires extension mysqli
 */
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    /**
     * @requires PHP 5.3
     */
    public function testConnection()
    {
        // 测试要求有 mysqli 扩展，并且 PHP &gt;= 5.3
    }

    // ... 所有其他要求有 mysqli 扩展的测试
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-01-09 at 16:55:58.
 */
class BowlingGame
{
    /**
     * @todo Implement roll().
     */
    public function roll()
    {
        // Remove the following line when you implement this method.
        throw new RuntimeException('Not yet implemented.');
    }

    /**
     * @todo Implement score().
     */
    public function score()
    {
        // Remove the following line when you implement this method.
        throw new RuntimeException('Not yet implemented.');
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T043741Z" creationid="Wynn" creationdate="20150330T043741Z">
        <seg>&lt;?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-01-09 at 16:55:58.
 */
class BowlingGame
{
    /**
     * @todo Implement roll().
     */
    public function roll()
    {
        // Remove the following line when you implement this method.
        throw new RuntimeException('Not yet implemented.');
    }

    /**
     * @todo Implement score().
     */
    public function score()
    {
        // Remove the following line when you implement this method.
        throw new RuntimeException('Not yet implemented.');
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
// Because it is "line based" and not statement base coverage
// one line will always have one coverage status
if (false) this_function_call_shows_up_as_covered();

// Due to how code coverage works internally these two lines are special.
// This line will show up as non executable
if (false)
    // This line will show up as covered because it is actually the 
    // coverage of the if statement in the line above that gets shown here!
    will_also_show_up_as_coveraged();

// To avoid this it is necessary that braces are used
if (false) {
    this_call_will_never_show_up_as_covered();
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T073730Z" creationid="Wynn" creationdate="20150309T073730Z">
        <seg>&lt;?php
// 因为覆盖率是“基于行”而不是基于语句的，
// 每行只会有一种覆盖状态
if (false) this_function_call_shows_up_as_covered();

// 由于代码覆盖率的内部工作方式，这两行显得很特别。
// 这一行会显示为非可执行
if (false)
    // 这一行会显示为已覆盖，
    // 实际上是上一行的 if 语句的覆盖信息显示在这了！
    will_also_show_up_as_coveraged();

// 要避免这种情况，必须使用大括号
if (false) {
    this_call_will_never_show_up_as_covered();
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
// Because it is "line based" and not statement base coverage
// one line will always have one coverage status
if (false) this_function_call_shows_up_as_covered();

// Due to how code coverage works internally these two lines are special.
// This line will show up as non executable
if (false)
    // This line will show up as covered because it is actually the 
    // coverage of the if statement in the line above that gets shown here!
    will_also_show_up_as_covered();

// To avoid this it is necessary that braces are used
if (false) {
    this_call_will_never_show_up_as_covered();
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150817T083835Z" creationid="Wynn" creationdate="20150817T083835Z">
        <seg>&lt;?php
// 因为覆盖率是“基于行”而不是基于语句的，
// 每行只会有一种覆盖状态
if (false) this_function_call_shows_up_as_covered();

// 由于代码覆盖率的内部工作方式，这两行显得很特殊。
// 这一行会显示为非可执行
if (false)
    // 这一行会显示为已覆盖，
    // 实际上是上一行的 if 语句的覆盖信息显示在这了！
    will_also_show_up_as_covered();

// 要避免这种情况，必须使用大括号
if (false) {
    this_call_will_never_show_up_as_covered();
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
// Because it is "line based" and not statement base coverage
// one line will always have one coverage status
if(false) this_function_call_shows_up_as_covered();

// Due to how code coverage works internally these two lines are special.
// This line will show up as non executable
if(false)
    // This line will show up as covered because it is actually the 
    // coverage of the if statement in the line above that gets shown here!
    will_also_show_up_as_coveraged();

// To avoid this it is necessary that braces are used
if(false) {
    this_call_will_never_show_up_as_covered();
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T033104Z" creationid="Wynn" creationdate="20150330T033104Z">
        <seg>&lt;?php
// 因为覆盖率是“基于行的”而不是基于语句的，
// 每行只会有一种覆盖状态。
if(false) this_function_call_shows_up_as_covered();

// 由于代码覆盖率的内部工作方式，这两行显得很特别。
// 这一行会显示为非可执行。
if(false)
    // 这一行会显示为已覆盖，
    // 实际上是上一行的 if 语句的覆盖信息显示在这了！
    will_also_show_up_as_coveraged();

// 为了避免这种情况，必须使用大括号
if(false) {
    this_call_will_never_show_up_as_covered();
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
// Because it is "line based" and not statement base coverage
// one line will always have one coverage status
if(false) this_function_call_shows_up_as_covered();

// Due to how code coverage works internally these two lines are special.
// This line will show up as non executable
if(false)
    // This line will show up as covered because it is actually the 
    // coverage of the if statement in the line above that gets shown here!
    will_also_show_up_as_covered();

// To avoid this it is necessary that braces are used
if(false) {
    this_call_will_never_show_up_as_covered();
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150817T091044Z" creationid="Wynn" creationdate="20150817T091044Z">
        <seg>&lt;?php
// 因为覆盖率是“基于行”而不是基于语句的，
// 每行只会有一种覆盖状态
if(false) this_function_call_shows_up_as_covered();

// 由于代码覆盖率的内部工作方式，这两行显得很特殊。
// 这一行会显示为非可执行
if(false)
    // 这一行会显示为已覆盖，
    // 实际上是上一行的 if 语句的覆盖信息显示在这了！
    will_also_show_up_as_covered();

// 要避免这种情况，必须使用大括号
if(false) {
    this_call_will_never_show_up_as_covered();
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
// Matcher that asserts that there is an element with an id="my_id".
$matcher = array('id' =&gt; 'my_id');

// Matcher that asserts that there is a "span" tag.
$matcher = array('tag' =&gt; 'span');

// Matcher that asserts that there is a "span" tag with the content
// "Hello World".
$matcher = array('tag' =&gt; 'span', 'content' =&gt; 'Hello World');

// Matcher that asserts that there is a "span" tag with content matching the
// regular expression pattern.
$matcher = array('tag' =&gt; 'span', 'content' =&gt; 'regexp:/Try P(HP|ython)/');

// Matcher that asserts that there is a "span" with an "list" class attribute.
$matcher = array(
  'tag'        =&gt; 'span',
  'attributes' =&gt; array('class' =&gt; 'list')
);

// Matcher that asserts that there is a "span" inside of a "div".
$matcher = array(
  'tag'    =&gt; 'span',
  'parent' =&gt; array('tag' =&gt; 'div')
);

// Matcher that asserts that there is a "span" somewhere inside a "table".
$matcher = array(
  'tag'      =&gt; 'span',
  'ancestor' =&gt; array('tag' =&gt; 'table')
);

// Matcher that asserts that there is a "span" with at least one "em" child.
$matcher = array(
  'tag'   =&gt; 'span',
  'child' =&gt; array('tag' =&gt; 'em')
);

// Matcher that asserts that there is a "span" containing a (possibly nested)
// "strong" tag.
$matcher = array(
  'tag'        =&gt; 'span',
  'descendant' =&gt; array('tag' =&gt; 'strong')
);

// Matcher that asserts that there is a "span" containing 5-10 "em" tags as
// immediate children.
$matcher = array(
  'tag'      =&gt; 'span',
  'children' =&gt; array(
    'less_than'    =&gt; 11,
    'greater_than' =&gt; 4,
    'only'         =&gt; array('tag' =&gt; 'em')
  )
);

// Matcher that asserts that there is a "div", with an "ul" ancestor and a "li"
// parent (with class="enum"), and containing a "span" descendant that contains
// an element with id="my_test" and the text "Hello World".
$matcher = array(
  'tag'        =&gt; 'div',
  'ancestor'   =&gt; array('tag' =&gt; 'ul'),
  'parent'     =&gt; array(
    'tag'        =&gt; 'li',
    'attributes' =&gt; array('class' =&gt; 'enum')
  ),
  'descendant' =&gt; array(
    'tag'   =&gt; 'span',
    'child' =&gt; array(
      'id'      =&gt; 'my_test',
      'content' =&gt; 'Hello World'
    )
  )
);

// Use assertTag() to apply a $matcher to a piece of $html.
$this-&gt;assertTag($matcher, $html);

// Use assertTag() to apply a $matcher to a piece of $xml.
$this-&gt;assertTag($matcher, $xml, '', FALSE);
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T055039Z" creationid="Wynn" creationdate="20150330T055039Z">
        <seg>&lt;?php
// 这个匹配器断言存在 id="my_id" 的元素。
$matcher = array('id' =&gt; 'my_id');

// 这个匹配器断言存在 "span" 标签。
$matcher = array('tag' =&gt; 'span');

// 这个匹配器断言存在内容为 "Hello World" 的 "span" 标签。
$matcher = array('tag' =&gt; 'span', 'content' =&gt; 'Hello World');

// 这个匹配器断言存在其内容与正则表达式模式相匹配的 "span" 标签。
$matcher = array('tag' =&gt; 'span', 'content' =&gt; 'regexp:/Try P(HP|ython)/');

// 这个匹配器断言存在class属性为 "list" 的 "span"。
$matcher = array(
  'tag'        =&gt; 'span',
  'attributes' =&gt; array('class' =&gt; 'list')
);

// 这个匹配器断言存在父元素为 "div" 的 "span"。
$matcher = array(
  'tag'    =&gt; 'span',
  'parent' =&gt; array('tag' =&gt; 'div')
);

// 这个匹配器断言存在某个 "span"，其祖先元素中有 "table"。
$matcher = array(
  'tag'      =&gt; 'span',
  'ancestor' =&gt; array('tag' =&gt; 'table')
);

// 这个匹配器断言存在某个 "span"，其直接子节点中至少有一个 "em"。
$matcher = array(
  'tag'   =&gt; 'span',
  'child' =&gt; array('tag' =&gt; 'em')
);

// 这个匹配器断言存在某个 "span"，其所有后代子节点中存在 "strong" 标签。
$matcher = array(
  'tag'        =&gt; 'span',
  'descendant' =&gt; array('tag' =&gt; 'strong')
);

// 这个匹配器断言存在某个 "span"，其直接子节点中包含有 5 到 10 个 "em" 标签。
$matcher = array(
  'tag'      =&gt; 'span',
  'children' =&gt; array(
    'less_than'    =&gt; 11,
    'greater_than' =&gt; 4,
    'only'         =&gt; array('tag' =&gt; 'em')
  )
);

// 这个匹配器断言存在一个 "div"，其祖先元素中有 "ul"，且其父元素是 class="enum" 的 "li"，
// 且其后代子节点中存在一个 id="my_test" 同时文本内容为 "Hello World" 的 "span"。
$matcher = array(
  'tag'        =&gt; 'div',
  'ancestor'   =&gt; array('tag' =&gt; 'ul'),
  'parent'     =&gt; array(
    'tag'        =&gt; 'li',
    'attributes' =&gt; array('class' =&gt; 'enum')
  ),
  'descendant' =&gt; array(
    'tag'   =&gt; 'span',
    'child' =&gt; array(
      'id'      =&gt; 'my_test',
      'content' =&gt; 'Hello World'
    )
  )
);

// 使用 assertTag() 来将 $matcher 应用到 $html 片段上。
$this-&gt;assertTag($matcher, $html);

// 使用 assertTag() 来将 $matcher 应用到 $xml 片段上。
$this-&gt;assertTag($matcher, $xml, '', FALSE);
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
abstract class AbstractClass
{
    public function concreteMethod()
    {
        return $this-&gt;abstractMethod();
    }

    public abstract function abstractMethod();
}

class AbstractClassTest extends PHPUnit_Framework_TestCase
{
    public function testConcreteMethod()
    {
        $stub = $this-&gt;getMockForAbstractClass('AbstractClass');

        $stub-&gt;expects($this-&gt;any())
             -&gt;method('abstractMethod')
             -&gt;will($this-&gt;returnValue(TRUE));

        $this-&gt;assertTrue($stub-&gt;concreteMethod());
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T091143Z" creationid="Wynn" creationdate="20150327T091143Z">
        <seg>&lt;?php
abstract class AbstractClass
{
    public function concreteMethod()
    {
        return $this-&gt;abstractMethod();
    }

    public abstract function abstractMethod();
}

class AbstractClassTest extends PHPUnit_Framework_TestCase
{
    public function testConcreteMethod()
    {
        $stub = $this-&gt;getMockForAbstractClass('AbstractClass');

        $stub-&gt;expects($this-&gt;any())
             -&gt;method('abstractMethod')
             -&gt;will($this-&gt;returnValue(TRUE));

        $this-&gt;assertTrue($stub-&gt;concreteMethod());
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
abstract class AbstractClass
{
    public function concreteMethod()
    {
        return $this-&gt;abstractMethod();
    }

    public abstract function abstractMethod();
}

class AbstractClassTest extends PHPUnit_Framework_TestCase
{
    public function testConcreteMethod()
    {
        $stub = $this-&gt;getMockForAbstractClass('AbstractClass');
        $stub-&gt;expects($this-&gt;any())
             -&gt;method('abstractMethod')
             -&gt;will($this-&gt;returnValue(TRUE));

        $this-&gt;assertTrue($stub-&gt;concreteMethod());
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T045458Z" creationid="Wynn" creationdate="20150330T045458Z">
        <seg>&lt;?php
abstract class AbstractClass
{
    public function concreteMethod()
    {
        return $this-&gt;abstractMethod();
    }

    public abstract function abstractMethod();
}

class AbstractClassTest extends PHPUnit_Framework_TestCase
{
    public function testConcreteMethod()
    {
        $stub = $this-&gt;getMockForAbstractClass('AbstractClass');
        $stub-&gt;expects($this-&gt;any())
             -&gt;method('abstractMethod')
             -&gt;will($this-&gt;returnValue(TRUE));

        $this-&gt;assertTrue($stub-&gt;concreteMethod());
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
abstract class AbstractClass
{
    public function concreteMethod()
    {
        return $this-&gt;abstractMethod();
    }

    public abstract function abstractMethod();
}

class AbstractClassTest extends PHPUnit_Framework_TestCase
{
    public function testConcreteMethod()
    {
        $stub = $this-&gt;getMockForAbstractClass(AbstractClass::class);

        $stub-&gt;expects($this-&gt;any())
             -&gt;method('abstractMethod')
             -&gt;will($this-&gt;returnValue(true));

        $this-&gt;assertTrue($stub-&gt;concreteMethod());
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T091055Z" creationid="Wynn" creationdate="20160418T091055Z">
        <seg>&lt;?php
abstract class AbstractClass
{
    public function concreteMethod()
    {
        return $this-&gt;abstractMethod();
    }

    public abstract function abstractMethod();
}

class AbstractClassTest extends PHPUnit_Framework_TestCase
{
    public function testConcreteMethod()
    {
        $stub = $this-&gt;getMockForAbstractClass(AbstractClass::class);

        $stub-&gt;expects($this-&gt;any())
             -&gt;method('abstractMethod')
             -&gt;will($this-&gt;returnValue(true));

        $this-&gt;assertTrue($stub-&gt;concreteMethod());
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
abstract class Generic_Tests_DatabaseTestCase extends PHPUnit_Extensions_Database_TestCase
{
    // only instantiate pdo once for test clean-up/fixture load
    static private $pdo = null;

    // only instantiate PHPUnit_Extensions_Database_DB_IDatabaseConnection once per test
    private $conn = null;

    final public function getConnection()
    {
        if ($this-&gt;conn === null) {
            if (self::$pdo == null) {
                self::$pdo = new PDO( $GLOBALS['DB_DSN'], $GLOBALS['DB_USER'], $GLOBALS['DB_PASSWD'] );
            }
            $this-&gt;conn = $this-&gt;createDefaultDBConnection(self::$pdo, $GLOBALS['DB_DBNAME']);
        }

        return $this-&gt;conn;
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150316T101012Z" creationid="Wynn" creationdate="20150316T101012Z">
        <seg>&lt;?php
abstract class Generic_Tests_DatabaseTestCase extends PHPUnit_Extensions_Database_TestCase
{
    // 只实例化 pdo 一次，供测试的清理和装载基境使用
    static private $pdo = null;

    // 对于每个测试，只实例化 PHPUnit_Extensions_Database_DB_IDatabaseConnection 一次
    private $conn = null;

    final public function getConnection()
    {
        if ($this-&gt;conn === null) {
            if (self::$pdo == null) {
                self::$pdo = new PDO( $GLOBALS['DB_DSN'], $GLOBALS['DB_USER'], $GLOBALS['DB_PASSWD'] );
            }
            $this-&gt;conn = $this-&gt;createDefaultDBConnection(self::$pdo, $GLOBALS['DB_DBNAME']);
        }

        return $this-&gt;conn;
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
abstract class MyApp_Tests_DatabaseTestCase extends PHPUnit_Extensions_Database_TestCase
{
    // only instantiate pdo once for test clean-up/fixture load
    static private $pdo = null;

    // only instantiate PHPUnit_Extensions_Database_DB_IDatabaseConnection once per test
    private $conn = null;

    final public function getConnection()
    {
        if ($this-&gt;conn === null) {
            if (self::$pdo == null) {
                self::$pdo = new PDO('sqlite::memory:');
            }
            $this-&gt;conn = $this-&gt;createDefaultDBConnection(self::$pdo, ':memory:');
        }

        return $this-&gt;conn;
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150316T100807Z" creationid="Wynn" creationdate="20150316T100807Z">
        <seg>&lt;?php
abstract class MyApp_Tests_DatabaseTestCase extends PHPUnit_Extensions_Database_TestCase
{
    // 只实例化 pdo 一次，供测试的清理和装载基境使用
    static private $pdo = null;

    // 对于每个测试，只实例化 PHPUnit_Extensions_Database_DB_IDatabaseConnection 一次
    private $conn = null;

    final public function getConnection()
    {
        if ($this-&gt;conn === null) {
            if (self::$pdo == null) {
                self::$pdo = new PDO('sqlite::memory:');
            }
            $this-&gt;conn = $this-&gt;createDefaultDBConnection(self::$pdo, ':memory:');
        }

        return $this-&gt;conn;
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
abstract class PHPUnit_Framework_Assert
{
    // ...

    /**
     * Asserts that a condition is true.
     *
     * @param  boolean $condition
     * @param  string  $message
     * @throws PHPUnit_Framework_AssertionFailedError
     */
    public static function assertTrue($condition, $message = '')
    {
        self::assertThat($condition, self::isTrue(), $message);
    }

    // ...

    /**
     * Returns a PHPUnit_Framework_Constraint_IsTrue matcher object.
     *
     * @return PHPUnit_Framework_Constraint_IsTrue
     * @since  Method available since Release 3.3.0
     */
    public static function isTrue()
    {
        return new PHPUnit_Framework_Constraint_IsTrue;
    }

    // ...
}?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T065730Z" creationid="Wynn" creationdate="20150319T065730Z">
        <seg>&lt;?php
abstract class PHPUnit_Framework_Assert
{
    // ...

    /**
     * 断言某个条件为真。
     *
     * @param  boolean $condition
     * @param  string  $message
     * @throws PHPUnit_Framework_AssertionFailedError
     */
    public static function assertTrue($condition, $message = '')
    {
        self::assertThat($condition, self::isTrue(), $message);
    }

    // ...

    /**
     * 返回一个 PHPUnit_Framework_Constraint_IsTrue 匹配器对象
     *
     * @return PHPUnit_Framework_Constraint_IsTrue
     * @since  Method available since Release 3.3.0
     */
    public static function isTrue()
    {
        return new PHPUnit_Framework_Constraint_IsTrue;
    }

    // ...
}?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ArrayDiffTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            [1, 2,  3, 4, 5, 6],
            [1, 2, 33, 4, 5, 6]
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T091222Z" creationid="Wynn" creationdate="20160418T091222Z">
        <seg>&lt;?php
class ArrayDiffTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            [1, 2,  3, 4, 5, 6],
            [1, 2, 33, 4, 5, 6]
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ArrayDiffTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            array(1,2,3 ,4,5,6),
            array(1,2,33,4,5,6)
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T024953Z" creationid="Wynn" creationdate="20150330T024953Z">
        <seg>&lt;?php
class ArrayDiffTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            array(1,2,3 ,4,5,6),
            array(1,2,33,4,5,6)
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ArrayGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    protected function getDataSet()
    {
        return $this-&gt;createArrayDataSet(array(
            'guestbook' =&gt; array(
                array('id' =&gt; 1, 'content' =&gt; 'Hello buddy!', 'user' =&gt; 'joe', 'created' =&gt; '2010-04-24 17:15:23'),
                array('id' =&gt; 2, 'content' =&gt; 'I like it!',   'user' =&gt; null,  'created' =&gt; '2010-04-26 12:14:20'),
            ),
        ));
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T070659Z" creationid="Wynn" creationdate="20150330T070659Z">
        <seg>&lt;?php
class ArrayGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    protected function getDataSet()
    {
        return $this-&gt;createArrayDataSet(array(
            'guestbook' =&gt; array(
                array('id' =&gt; 1, 'content' =&gt; 'Hello buddy!', 'user' =&gt; 'joe', 'created' =&gt; '2010-04-24 17:15:23'),
                array('id' =&gt; 2, 'content' =&gt; 'I like it!',   'user' =&gt; null,  'created' =&gt; '2010-04-26 12:14:20'),
            ),
        ));
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ArrayGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    protected function getDataSet()
    {
        return new MyApp_DbUnit_ArrayDataSet(
            [
                'guestbook' =&gt; [
                    [
                        'id' =&gt; 1,
                        'content' =&gt; 'Hello buddy!',
                        'user' =&gt; 'joe',
                        'created' =&gt; '2010-04-24 17:15:23'
                    ],
                    [
                        'id' =&gt; 2,
                        'content' =&gt; 'I like it!',
                        'user' =&gt; null,
                        'created' =&gt; '2010-04-26 12:14:20'
                    ],
                ],
            ]
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083301Z" creationid="Wynn" creationdate="20160418T083301Z">
        <seg>&lt;?php
class ArrayGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    protected function getDataSet()
    {
        return new MyApp_DbUnit_ArrayDataSet(
            [
                'guestbook' =&gt; [
                    [
                        'id' =&gt; 1,
                        'content' =&gt; 'Hello buddy!',
                        'user' =&gt; 'joe',
                        'created' =&gt; '2010-04-24 17:15:23'
                    ],
                    [
                        'id' =&gt; 2,
                        'content' =&gt; 'I like it!',
                        'user' =&gt; null,
                        'created' =&gt; '2010-04-26 12:14:20'
                    ],
                ],
            ]
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ArrayGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    protected function getDataSet()
    {
        return new MyApp_DbUnit_ArrayDataSet(array(
            'guestbook' =&gt; array(
                array('id' =&gt; 1, 'content' =&gt; 'Hello buddy!', 'user' =&gt; 'joe', 'created' =&gt; '2010-04-24 17:15:23'),
                array('id' =&gt; 2, 'content' =&gt; 'I like it!',   'user' =&gt; null,  'created' =&gt; '2010-04-26 12:14:20'),
            ),
        ));
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150317T074511Z" creationid="Wynn" creationdate="20150317T074511Z">
        <seg>&lt;?php
class ArrayGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    protected function getDataSet()
    {
        return new MyApp_DbUnit_ArrayDataSet(array(
            'guestbook' =&gt; array(
                array('id' =&gt; 1, 'content' =&gt; 'Hello buddy!', 'user' =&gt; 'joe', 'created' =&gt; '2010-04-24 17:15:23'),
                array('id' =&gt; 2, 'content' =&gt; 'I like it!',   'user' =&gt; null,  'created' =&gt; '2010-04-26 12:14:20'),
            ),
        ));
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ArrayHasKeyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertArrayHasKey('foo', ['bar' =&gt; 'baz']);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083031Z" creationid="Wynn" creationdate="20160418T083031Z">
        <seg>&lt;?php
class ArrayHasKeyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertArrayHasKey('foo', ['bar' =&gt; 'baz']);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ArrayHasKeyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertArrayHasKey('foo', array('bar' =&gt; 'baz'));
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092801Z" creationid="Wynn" creationdate="20150309T092801Z">
        <seg>&lt;?php
class ArrayHasKeyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertArrayHasKey('foo', array('bar' =&gt; 'baz'));
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ArraySubsetTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertArraySubset(['config' =&gt; ['key-a', 'key-b']], ['config' =&gt; ['key-a']]);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150706T075441Z" creationid="Wynn" creationdate="20150706T075441Z">
        <seg>&lt;?php
class ArraySubsetTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertArraySubset(['config' =&gt; ['key-a', 'key-b']], ['config' =&gt; ['key-a']]);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ArrayWeakComparisonTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            [1, 2, 3, 4, 5, 6],
            ['1', 2, 33, 4, 5, 6]
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T091230Z" creationid="Wynn" creationdate="20160418T091230Z">
        <seg>&lt;?php
class ArrayWeakComparisonTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            [1, 2, 3, 4, 5, 6],
            ['1', 2, 33, 4, 5, 6]
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ArrayWeakComparisonTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            array(1  ,2,3 ,4,5,6),
            array('1',2,33,4,5,6)
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T025050Z" creationid="Wynn" creationdate="20150330T025050Z">
        <seg>&lt;?php
class ArrayWeakComparisonTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            array(1  ,2,3 ,4,5,6),
            array('1',2,33,4,5,6)
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class BankAccount
{
    private $balance = 0;

    public function getBalance()
    {
        return $this-&gt;balance;
    }

    protected function setBalance($balance)
    {
        PHPUnit_Framework_Assert::assertTrue($balance &gt;= 0);

        $this-&gt;balance = $balance;
    }

    public function depositMoney($amount)
    {
        PHPUnit_Framework_Assert::assertTrue($amount &gt;= 0);

        $this-&gt;setBalance($this-&gt;getBalance() + $amount);

        return $this-&gt;getBalance();
    }

    public function withdrawMoney($amount)
    {
        PHPUnit_Framework_Assert::assertTrue($amount &gt;= 0);
        PHPUnit_Framework_Assert::assertTrue($this-&gt;balance &gt;= $amount);

        $this-&gt;setBalance($this-&gt;getBalance() - $amount);

        return $this-&gt;getBalance();
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T050525Z" creationid="Wynn" creationdate="20150330T050525Z">
        <seg>&lt;?php
class BankAccount
{
    private $balance = 0;

    public function getBalance()
    {
        return $this-&gt;balance;
    }

    protected function setBalance($balance)
    {
        PHPUnit_Framework_Assert::assertTrue($balance &gt;= 0);

        $this-&gt;balance = $balance;
    }

    public function depositMoney($amount)
    {
        PHPUnit_Framework_Assert::assertTrue($amount &gt;= 0);

        $this-&gt;setBalance($this-&gt;getBalance() + $amount);

        return $this-&gt;getBalance();
    }

    public function withdrawMoney($amount)
    {
        PHPUnit_Framework_Assert::assertTrue($amount &gt;= 0);
        PHPUnit_Framework_Assert::assertTrue($this-&gt;balance &gt;= $amount);

        $this-&gt;setBalance($this-&gt;getBalance() - $amount);

        return $this-&gt;getBalance();
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class BankAccount
{
    protected $balance = 0;

    public function getBalance()
    {
        return $this-&gt;balance;
    }

    protected function setBalance($balance)
    {
        if ($balance &gt;= 0) {
            $this-&gt;balance = $balance;
        } else {
            throw new BankAccountException;
        }
    }

    public function depositMoney($balance)
    {
        $this-&gt;setBalance($this-&gt;getBalance() + $balance);

        return $this-&gt;getBalance();
    }

    public function withdrawMoney($balance)
    {
        $this-&gt;setBalance($this-&gt;getBalance() - $balance);

        return $this-&gt;getBalance();
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T050401Z" creationid="Wynn" creationdate="20150330T050401Z">
        <seg>&lt;?php
class BankAccount
{
    protected $balance = 0;

    public function getBalance()
    {
        return $this-&gt;balance;
    }

    protected function setBalance($balance)
    {
        if ($balance &gt;= 0) {
            $this-&gt;balance = $balance;
        } else {
            throw new BankAccountException;
        }
    }

    public function depositMoney($balance)
    {
        $this-&gt;setBalance($this-&gt;getBalance() + $balance);

        return $this-&gt;getBalance();
    }

    public function withdrawMoney($balance)
    {
        $this-&gt;setBalance($this-&gt;getBalance() - $balance);

        return $this-&gt;getBalance();
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class BankAccount
{
    protected $balance = 0;

    public function getBalance()
    {
        return $this-&gt;balance;
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T050222Z" creationid="Wynn" creationdate="20150330T050222Z">
        <seg>&lt;?php
class BankAccount
{
    protected $balance = 0;

    public function getBalance()
    {
        return $this-&gt;balance;
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class BankAccountTest extends PHPUnit_Framework_TestCase
{
    protected $ba;

    protected function setUp()
    {
        $this-&gt;ba = new BankAccount;
    }

    /**
     * @covers BankAccount::getBalance
     */
    public function testBalanceIsInitiallyZero()
    {
        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
    }

    /**
     * @covers BankAccount::withdrawMoney
     */
    public function testBalanceCannotBecomeNegative()
    {
        try {
            $this-&gt;ba-&gt;withdrawMoney(1);
        }

        catch (BankAccountException $e) {
            $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());

            return;
        }

        $this-&gt;fail();
    }

    /**
     * @covers BankAccount::depositMoney
     */
    public function testBalanceCannotBecomeNegative2()
    {
        try {
            $this-&gt;ba-&gt;depositMoney(-1);
        }

        catch (BankAccountException $e) {
            $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());

            return;
        }

        $this-&gt;fail();
    }

    /**
     * @covers BankAccount::getBalance
     * @covers BankAccount::depositMoney
     * @covers BankAccount::withdrawMoney
     */
    public function testDepositWithdrawMoney()
    {
        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
        $this-&gt;ba-&gt;depositMoney(1);
        $this-&gt;assertEquals(1, $this-&gt;ba-&gt;getBalance());
        $this-&gt;ba-&gt;withdrawMoney(1);
        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093401Z" creationid="Wynn" creationdate="20150309T093401Z">
        <seg>&lt;?php
class BankAccountTest extends PHPUnit_Framework_TestCase
{
    protected $ba;

    protected function setUp()
    {
        $this-&gt;ba = new BankAccount;
    }

    /**
     * @covers BankAccount::getBalance
     */
    public function testBalanceIsInitiallyZero()
    {
        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
    }

    /**
     * @covers BankAccount::withdrawMoney
     */
    public function testBalanceCannotBecomeNegative()
    {
        try {
            $this-&gt;ba-&gt;withdrawMoney(1);
        }

        catch (BankAccountException $e) {
            $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());

            return;
        }

        $this-&gt;fail();
    }

    /**
     * @covers BankAccount::depositMoney
     */
    public function testBalanceCannotBecomeNegative2()
    {
        try {
            $this-&gt;ba-&gt;depositMoney(-1);
        }

        catch (BankAccountException $e) {
            $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());

            return;
        }

        $this-&gt;fail();
    }

    /**
     * @covers BankAccount::getBalance
     * @covers BankAccount::depositMoney
     * @covers BankAccount::withdrawMoney
     */
    public function testDepositWithdrawMoney()
    {
        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
        $this-&gt;ba-&gt;depositMoney(1);
        $this-&gt;assertEquals(1, $this-&gt;ba-&gt;getBalance());
        $this-&gt;ba-&gt;withdrawMoney(1);
        $this-&gt;assertEquals(0, $this-&gt;ba-&gt;getBalance());
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class BiscuitTest extends PHPUnit_Framework_TestCase
{
    public function testEquals()
    {
        $theBiscuit = new Biscuit('Ginger');
        $myBiscuit  = new Biscuit('Ginger');

        $this-&gt;assertThat(
          $theBiscuit,
          $this-&gt;logicalNot(
            $this-&gt;equalTo($myBiscuit)
          )
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093238Z" creationid="Wynn" creationdate="20150309T093238Z">
        <seg>&lt;?php
class BiscuitTest extends PHPUnit_Framework_TestCase
{
    public function testEquals()
    {
        $theBiscuit = new Biscuit('Ginger');
        $myBiscuit  = new Biscuit('Ginger');

        $this-&gt;assertThat(
          $theBiscuit,
          $this-&gt;logicalNot(
            $this-&gt;equalTo($myBiscuit)
          )
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class BowlingGameTest extends PHPUnit_Framework_TestCase
{
    protected $game;

    protected function setUp()
    {
        $this-&gt;game = new BowlingGame;
    }

    protected function rollMany($n, $pins)
    {
        for ($i = 0; $i &lt; $n; $i++) {
            $this-&gt;game-&gt;roll($pins);
        }
    }

    public function testScoreForGutterGameIs0()
    {
        $this-&gt;rollMany(20, 0);
        $this-&gt;assertEquals(0, $this-&gt;game-&gt;score());
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T043716Z" creationid="Wynn" creationdate="20150330T043716Z">
        <seg>&lt;?php
class BowlingGameTest extends PHPUnit_Framework_TestCase
{
    protected $game;

    protected function setUp()
    {
        $this-&gt;game = new BowlingGame;
    }

    protected function rollMany($n, $pins)
    {
        for ($i = 0; $i &lt; $n; $i++) {
            $this-&gt;game-&gt;roll($pins);
        }
    }

    public function testScoreForGutterGameIs0()
    {
        $this-&gt;rollMany(20, 0);
        $this-&gt;assertEquals(0, $this-&gt;game-&gt;score());
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class Calculator
{
    /**
     * @assert (0, 0) == 0
     * @assert (0, 1) == 1
     * @assert (1, 0) == 1
     * @assert (1, 1) == 2
     */
    public function add($a, $b)
    {
        return $a + $b;
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T043420Z" creationid="Wynn" creationdate="20150330T043420Z">
        <seg>&lt;?php
class Calculator
{
    /**
     * @assert (0, 0) == 0
     * @assert (0, 1) == 1
     * @assert (1, 0) == 1
     * @assert (1, 1) == 2
     */
    public function add($a, $b)
    {
        return $a + $b;
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class Calculator
{
    public function add($a, $b)
    {
        return $a + $b;
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T043144Z" creationid="Wynn" creationdate="20150330T043144Z">
        <seg>&lt;?php
class Calculator
{
    public function add($a, $b)
    {
        return $a + $b;
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ClassHasAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertClassHasAttribute('foo', 'stdClass');
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092807Z" creationid="Wynn" creationdate="20150309T092807Z">
        <seg>&lt;?php
class ClassHasAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertClassHasAttribute('foo', 'stdClass');
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ClassHasAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertClassHasAttribute('foo', stdClass::class);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083035Z" creationid="Wynn" creationdate="20160418T083035Z">
        <seg>&lt;?php
class ClassHasAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertClassHasAttribute('foo', stdClass::class);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ClassHasStaticAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertClassHasStaticAttribute('foo', 'stdClass');
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092813Z" creationid="Wynn" creationdate="20150309T092813Z">
        <seg>&lt;?php
class ClassHasStaticAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertClassHasStaticAttribute('foo', 'stdClass');
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ClassHasStaticAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertClassHasStaticAttribute('foo', stdClass::class);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083037Z" creationid="Wynn" creationdate="20160418T083037Z">
        <seg>&lt;?php
class ClassHasStaticAttributeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertClassHasStaticAttribute('foo', stdClass::class);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ComplexQueryTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testComplexQuery()
    {
        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable(
            'myComplexQuery', 'SELECT complexQuery...'
        );
        $expectedTable = $this-&gt;createFlatXmlDataSet("complexQueryAssertion.xml")
                              -&gt;getTable("myComplexQuery");
        $this-&gt;assertTablesEqual($expectedTable, $queryTable);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T042217Z" creationid="Wynn" creationdate="20150319T042217Z">
        <seg>&lt;?php
class ComplexQueryTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testComplexQuery()
    {
        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable(
            'myComplexQuery', 'SELECT complexQuery...'
        );
        $expectedTable = $this-&gt;createFlatXmlDataSet("complexQueryAssertion.xml")
                              -&gt;getTable("myComplexQuery");
        $this-&gt;assertTablesEqual($expectedTable, $queryTable);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class CompositeTest extends PHPUnit_Extensions_Database_TestCase
{
    public function getDataSet()
    {
        $ds1 = $this-&gt;createFlatXmlDataSet('fixture1.xml');
        $ds2 = $this-&gt;createFlatXmlDataSet('fixture2.xml');

        $compositeDs = new PHPUnit_Extensions_Database_DataSet_CompositeDataSet();
        $compositeDs-&gt;addDataSet($ds1);
        $compositeDs-&gt;addDataSet($ds2);

        return $compositeDs;
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150317T075449Z" creationid="Wynn" creationdate="20150317T075449Z">
        <seg>&lt;?php
class CompositeTest extends PHPUnit_Extensions_Database_TestCase
{
    public function getDataSet()
    {
        $ds1 = $this-&gt;createFlatXmlDataSet('fixture1.xml');
        $ds2 = $this-&gt;createFlatXmlDataSet('fixture2.xml');

        $compositeDs = new PHPUnit_Extensions_Database_DataSet_CompositeDataSet();
        $compositeDs-&gt;addDataSet($ds1);
        $compositeDs-&gt;addDataSet($ds2);

        return $compositeDs;
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ConnectionTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateDataSet()
    {
        $tableNames = ['guestbook'];
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083307Z" creationid="Wynn" creationdate="20160418T083307Z">
        <seg>&lt;?php
class ConnectionTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateDataSet()
    {
        $tableNames = ['guestbook'];
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ConnectionTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateDataSet()
    {
        $tableNames = array('guestbook');
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150318T090301Z" creationid="Wynn" creationdate="20150318T090301Z">
        <seg>&lt;?php
class ConnectionTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateDataSet()
    {
        $tableNames = array('guestbook');
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ConnectionTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateQueryTable()
    {
        $tableNames = ['guestbook'];
        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable('guestbook', 'SELECT * FROM guestbook');
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083308Z" creationid="Wynn" creationdate="20160418T083308Z">
        <seg>&lt;?php
class ConnectionTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateQueryTable()
    {
        $tableNames = ['guestbook'];
        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable('guestbook', 'SELECT * FROM guestbook');
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ConnectionTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateQueryTable()
    {
        $tableNames = array('guestbook');
        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable('guestbook', 'SELECT * FROM guestbook');
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150318T090351Z" creationid="Wynn" creationdate="20150318T090351Z">
        <seg>&lt;?php
class ConnectionTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateQueryTable()
    {
        $tableNames = array('guestbook');
        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable('guestbook', 'SELECT * FROM guestbook');
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ConnectionTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testGetRowCount()
    {
        $this-&gt;assertEquals(2, $this-&gt;getConnection()-&gt;getRowCount('guestbook'));
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150318T090426Z" creationid="Wynn" creationdate="20150318T090426Z">
        <seg>&lt;?php
class ConnectionTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testGetRowCount()
    {
        $this-&gt;assertEquals(2, $this-&gt;getConnection()-&gt;getRowCount('guestbook'));
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ContainsOnlyInstancesOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContainsOnlyInstancesOf(
            Foo::class,
            [new Foo, new Bar, new Foo]
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083132Z" creationid="Wynn" creationdate="20160418T083132Z">
        <seg>&lt;?php
class ContainsOnlyInstancesOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContainsOnlyInstancesOf(
            Foo::class,
            [new Foo, new Bar, new Foo]
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ContainsOnlyInstancesOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContainsOnlyInstancesOf('Foo', array(new Foo(), new Bar(), new Foo()));
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092925Z" creationid="Wynn" creationdate="20150309T092925Z">
        <seg>&lt;?php
class ContainsOnlyInstancesOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContainsOnlyInstancesOf('Foo', array(new Foo(), new Bar(), new Foo()));
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ContainsOnlyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContainsOnly('string', ['1', '2', 3]);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083120Z" creationid="Wynn" creationdate="20160418T083120Z">
        <seg>&lt;?php
class ContainsOnlyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContainsOnly('string', ['1', '2', 3]);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ContainsOnlyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContainsOnly('string', array('1', '2', 3));
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092914Z" creationid="Wynn" creationdate="20150309T092914Z">
        <seg>&lt;?php
class ContainsOnlyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContainsOnly('string', array('1', '2', 3));
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContains('baz', 'foobar');
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092839Z" creationid="Wynn" creationdate="20150309T092839Z">
        <seg>&lt;?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContains('baz', 'foobar');
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContains('foo', 'FooBar');
    }

    public function testOK()
    {
        $this-&gt;assertContains('foo', 'FooBar', '', true);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092855Z" creationid="Wynn" creationdate="20150309T092855Z">
        <seg>&lt;?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContains('foo', 'FooBar');
    }

    public function testOK()
    {
        $this-&gt;assertContains('foo', 'FooBar', '', true);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContains(4, [1, 2, 3]);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083040Z" creationid="Wynn" creationdate="20160418T083040Z">
        <seg>&lt;?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContains(4, [1, 2, 3]);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContains(4, array(1, 2, 3));
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092829Z" creationid="Wynn" creationdate="20150309T092829Z">
        <seg>&lt;?php
class ContainsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertContains(4, array(1, 2, 3));
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class CountTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertCount(0, ['foo']);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083135Z" creationid="Wynn" creationdate="20160418T083135Z">
        <seg>&lt;?php
class CountTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertCount(0, ['foo']);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class CountTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertCount(0, array('foo'));
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092933Z" creationid="Wynn" creationdate="20150309T092933Z">
        <seg>&lt;?php
class CountTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertCount(0, array('foo'));
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class CsvFileIterator implements Iterator {
    protected $file;
    protected $key = 0;
    protected $current;

    public function __construct($file) {
        $this-&gt;file = fopen($file, 'r');
    }

    public function __destruct() {
        fclose($this-&gt;file);
    }

    public function rewind() {
        rewind($this-&gt;file);
        $this-&gt;current = fgetcsv($this-&gt;file);
        $this-&gt;key = 0;
    }

    public function valid() {
        return !feof($this-&gt;file);
    }

    public function key() {
        return $this-&gt;key;
    }

    public function current() {
        return $this-&gt;current;
    }

    public function next() {
        $this-&gt;current = fgetcsv($this-&gt;file);
        $this-&gt;key++;
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T102333Z" creationid="Wynn" creationdate="20150327T102333Z">
        <seg>&lt;?php
class CsvFileIterator implements Iterator {
    protected $file;
    protected $key = 0;
    protected $current;

    public function __construct($file) {
        $this-&gt;file = fopen($file, 'r');
    }

    public function __destruct() {
        fclose($this-&gt;file);
    }

    public function rewind() {
        rewind($this-&gt;file);
        $this-&gt;current = fgetcsv($this-&gt;file);
        $this-&gt;key = 0;
    }

    public function valid() {
        return !feof($this-&gt;file);
    }

    public function key() {
        return $this-&gt;key;
    }

    public function current() {
        return $this-&gt;current;
    }

    public function next() {
        $this-&gt;current = fgetcsv($this-&gt;file);
        $this-&gt;key++;
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class CsvGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    protected function getDataSet()
    {
        $dataSet = new PHPUnit_Extensions_Database_DataSet_CsvDataSet();
        $dataSet-&gt;addTable('guestbook', dirname(__FILE__)."/_files/guestbook.csv");
        return $dataSet;
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150317T074451Z" creationid="Wynn" creationdate="20150317T074451Z">
        <seg>&lt;?php
class CsvGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    protected function getDataSet()
    {
        $dataSet = new PHPUnit_Extensions_Database_DataSet_CsvDataSet();
        $dataSet-&gt;addTable('guestbook', dirname(__FILE__)."/_files/guestbook.csv");
        return $dataSet;
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DataDrivenTest implements PHPUnit_Framework_Test
{
    private $lines;

    public function __construct($dataFile)
    {
        $this-&gt;lines = file($dataFile);
    }

    public function count()
    {
        return 1;
    }

    public function run(PHPUnit_Framework_TestResult $result = NULL)
    {
        if ($result === NULL) {
            $result = new PHPUnit_Framework_TestResult;
        }

        foreach ($this-&gt;lines as $line) {
            $result-&gt;startTest($this);
            PHP_Timer::start();
            $stopTime = NULL;

            list($expected, $actual) = explode(';', $line);

            try {
                PHPUnit_Framework_Assert::assertEquals(
                  trim($expected), trim($actual)
                );
            }

            catch (PHPUnit_Framework_AssertionFailedError $e) {
                $stopTime = PHP_Timer::stop();
                $result-&gt;addFailure($this, $e, $stopTime);
            }

            catch (Exception $e) {
                $stopTime = PHP_Timer::stop();
                $result-&gt;addError($this, $e, $stopTime);
            }

            if ($stopTime === NULL) {
                $stopTime = PHP_Timer::stop();
            }

            $result-&gt;endTest($this, $stopTime);
        }

        return $result;
    }
}

$test = new DataDrivenTest('data_file.csv');
$result = PHPUnit_TextUI_TestRunner::run($test);
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T075641Z" creationid="Wynn" creationdate="20150319T075641Z">
        <seg>&lt;?php
class DataDrivenTest implements PHPUnit_Framework_Test
{
    private $lines;

    public function __construct($dataFile)
    {
        $this-&gt;lines = file($dataFile);
    }

    public function count()
    {
        return 1;
    }

    public function run(PHPUnit_Framework_TestResult $result = NULL)
    {
        if ($result === NULL) {
            $result = new PHPUnit_Framework_TestResult;
        }

        foreach ($this-&gt;lines as $line) {
            $result-&gt;startTest($this);
            PHP_Timer::start();
            $stopTime = NULL;

            list($expected, $actual) = explode(';', $line);

            try {
                PHPUnit_Framework_Assert::assertEquals(
                  trim($expected), trim($actual)
                );
            }

            catch (PHPUnit_Framework_AssertionFailedError $e) {
                $stopTime = PHP_Timer::stop();
                $result-&gt;addFailure($this, $e, $stopTime);
            }

            catch (Exception $e) {
                $stopTime = PHP_Timer::stop();
                $result-&gt;addError($this, $e, $stopTime);
            }

            if ($stopTime === NULL) {
                $stopTime = PHP_Timer::stop();
            }

            $result-&gt;endTest($this, $stopTime);
        }

        return $result;
    }
}

$test = new DataDrivenTest('data_file.csv');
$result = PHPUnit_TextUI_TestRunner::run($test);
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DataDrivenTest implements PHPUnit_Framework_Test
{
    private $lines;

    public function __construct($dataFile)
    {
        $this-&gt;lines = file($dataFile);
    }

    public function count()
    {
        return 1;
    }

    public function run(PHPUnit_Framework_TestResult $result = null)
    {
        if ($result === null) {
            $result = new PHPUnit_Framework_TestResult;
        }

        foreach ($this-&gt;lines as $line) {
            $result-&gt;startTest($this);
            PHP_Timer::start();
            $stopTime = null;

            list($expected, $actual) = explode(';', $line);

            try {
                PHPUnit_Framework_Assert::assertEquals(
                  trim($expected), trim($actual)
                );
            }

            catch (PHPUnit_Framework_AssertionFailedError $e) {
                $stopTime = PHP_Timer::stop();
                $result-&gt;addFailure($this, $e, $stopTime);
            }

            catch (Exception $e) {
                $stopTime = PHP_Timer::stop();
                $result-&gt;addError($this, $e, $stopTime);
            }

            if ($stopTime === null) {
                $stopTime = PHP_Timer::stop();
            }

            $result-&gt;endTest($this, $stopTime);
        }

        return $result;
    }
}

$test = new DataDrivenTest('data_file.csv');
$result = PHPUnit_TextUI_TestRunner::run($test);
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083311Z" creationid="Wynn" creationdate="20160418T083311Z">
        <seg>&lt;?php
class DataDrivenTest implements PHPUnit_Framework_Test
{
    private $lines;

    public function __construct($dataFile)
    {
        $this-&gt;lines = file($dataFile);
    }

    public function count()
    {
        return 1;
    }

    public function run(PHPUnit_Framework_TestResult $result = null)
    {
        if ($result === null) {
            $result = new PHPUnit_Framework_TestResult;
        }

        foreach ($this-&gt;lines as $line) {
            $result-&gt;startTest($this);
            PHP_Timer::start();
            $stopTime = null;

            list($expected, $actual) = explode(';', $line);

            try {
                PHPUnit_Framework_Assert::assertEquals(
                  trim($expected), trim($actual)
                );
            }

            catch (PHPUnit_Framework_AssertionFailedError $e) {
                $stopTime = PHP_Timer::stop();
                $result-&gt;addFailure($this, $e, $stopTime);
            }

            catch (Exception $e) {
                $stopTime = PHP_Timer::stop();
                $result-&gt;addError($this, $e, $stopTime);
            }

            if ($stopTime === null) {
                $stopTime = PHP_Timer::stop();
            }

            $result-&gt;endTest($this, $stopTime);
        }

        return $result;
    }
}

$test = new DataDrivenTest('data_file.csv');
$result = PHPUnit_TextUI_TestRunner::run($test);
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DataSetAssertionsTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateDataSetAssertion()
    {
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet(['guestbook']);
        $expectedDataSet = $this-&gt;createFlatXmlDataSet('guestbook.xml');
        $this-&gt;assertDataSetsEqual($expectedDataSet, $dataSet);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083309Z" creationid="Wynn" creationdate="20160418T083309Z">
        <seg>&lt;?php
class DataSetAssertionsTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateDataSetAssertion()
    {
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet(['guestbook']);
        $expectedDataSet = $this-&gt;createFlatXmlDataSet('guestbook.xml');
        $this-&gt;assertDataSetsEqual($expectedDataSet, $dataSet);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DataSetAssertionsTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateDataSetAssertion()
    {
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet(array('guestbook'));
        $expectedDataSet = $this-&gt;createFlatXmlDataSet('guestbook.xml');
        $this-&gt;assertDataSetsEqual($expectedDataSet, $dataSet);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T042257Z" creationid="Wynn" creationdate="20150319T042257Z">
        <seg>&lt;?php
class DataSetAssertionsTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testCreateDataSetAssertion()
    {
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet(array('guestbook'));
        $expectedDataSet = $this-&gt;createFlatXmlDataSet('guestbook.xml');
        $this-&gt;assertDataSetsEqual($expectedDataSet, $dataSet);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DataSetAssertionsTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testManualDataSetAssertion()
    {
        $dataSet = new PHPUnit_Extensions_Database_DataSet_QueryDataSet();
        $dataSet-&gt;addTable('guestbook', 'SELECT id, content, user FROM guestbook'); // additional tables
        $expectedDataSet = $this-&gt;createFlatXmlDataSet('guestbook.xml');

        $this-&gt;assertDataSetsEqual($expectedDataSet, $dataSet);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T042306Z" creationid="Wynn" creationdate="20150319T042306Z">
        <seg>&lt;?php
class DataSetAssertionsTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testManualDataSetAssertion()
    {
        $dataSet = new PHPUnit_Extensions_Database_DataSet_QueryDataSet();
        $dataSet-&gt;addTable('guestbook', 'SELECT id, content, user FROM guestbook'); // additional tables
        $expectedDataSet = $this-&gt;createFlatXmlDataSet('guestbook.xml');

        $this-&gt;assertDataSetsEqual($expectedDataSet, $dataSet);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DataSetFilterTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testIncludeFilteredGuestbook()
    {
        $tableNames = ['guestbook'];
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();

        $filterDataSet = new PHPUnit_Extensions_Database_DataSet_DataSetFilter($dataSet);
        $filterDataSet-&gt;addIncludeTables(['guestbook']);
        $filterDataSet-&gt;setIncludeColumnsForTable('guestbook', ['id', 'content']);
        // ..
    }

    public function testExcludeFilteredGuestbook()
    {
        $tableNames = ['guestbook'];
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();

        $filterDataSet = new PHPUnit_Extensions_Database_DataSet_DataSetFilter($dataSet);
        $filterDataSet-&gt;addExcludeTables(['foo', 'bar', 'baz']); // only keep the guestbook table!
        $filterDataSet-&gt;setExcludeColumnsForTable('guestbook', ['user', 'created']);
        // ..
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083305Z" creationid="Wynn" creationdate="20160418T083305Z">
        <seg>&lt;?php
class DataSetFilterTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testIncludeFilteredGuestbook()
    {
        $tableNames = ['guestbook'];
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();

        $filterDataSet = new PHPUnit_Extensions_Database_DataSet_DataSetFilter($dataSet);
        $filterDataSet-&gt;addIncludeTables(['guestbook']);
        $filterDataSet-&gt;setIncludeColumnsForTable('guestbook', ['id', 'content']);
        // ..
    }

    public function testExcludeFilteredGuestbook()
    {
        $tableNames = ['guestbook'];
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();

        $filterDataSet = new PHPUnit_Extensions_Database_DataSet_DataSetFilter($dataSet);
        $filterDataSet-&gt;addExcludeTables(['foo', 'bar', 'baz']); // only keep the guestbook table!
        $filterDataSet-&gt;setExcludeColumnsForTable('guestbook', ['user', 'created']);
        // ..
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DataSetFilterTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testIncludeFilteredGuestbook()
    {
        $tableNames = array('guestbook');
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();

        $filterDataSet = new PHPUnit_Extensions_Database_DataSet_DataSetFilter($dataSet);
        $filterDataSet-&gt;addIncludeTables(array('guestbook'));
        $filterDataSet-&gt;setIncludeColumnsForTable('guestbook', array('id', 'content'));
        // ..
    }

    public function testExcludeFilteredGuestbook()
    {
        $tableNames = array('guestbook');
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();

        $filterDataSet = new PHPUnit_Extensions_Database_DataSet_DataSetFilter($dataSet);
        $filterDataSet-&gt;addExcludeTables(array('foo', 'bar', 'baz')); // only keep the guestbook table!
        $filterDataSet-&gt;setExcludeColumnsForTable('guestbook', array('user', 'created'));
        // ..
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150317T075221Z" creationid="Wynn" creationdate="20150317T075221Z">
        <seg>&lt;?php
class DataSetFilterTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testIncludeFilteredGuestbook()
    {
        $tableNames = array('guestbook');
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();

        $filterDataSet = new PHPUnit_Extensions_Database_DataSet_DataSetFilter($dataSet);
        $filterDataSet-&gt;addIncludeTables(array('guestbook'));
        $filterDataSet-&gt;setIncludeColumnsForTable('guestbook', array('id', 'content'));
        // ..
    }

    public function testExcludeFilteredGuestbook()
    {
        $tableNames = array('guestbook');
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();

        $filterDataSet = new PHPUnit_Extensions_Database_DataSet_DataSetFilter($dataSet);
        $filterDataSet-&gt;addExcludeTables(array('foo', 'bar', 'baz')); // only keep the guestbook table!
        $filterDataSet-&gt;setExcludeColumnsForTable('guestbook', array('user', 'created'));
        // ..
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this-&gt;assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return [
            'adding zeros'  =&gt; [0, 0, 0],
            'zero plus one' =&gt; [0, 1, 1],
            'one plus zero' =&gt; [1, 0, 1],
            'one plus one'  =&gt; [1, 1, 3]
        ];
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T091215Z" creationid="Wynn" creationdate="20160418T091215Z">
        <seg>&lt;?php
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this-&gt;assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return [
            'adding zeros'  =&gt; [0, 0, 0],
            'zero plus one' =&gt; [0, 1, 1],
            'one plus zero' =&gt; [1, 0, 1],
            'one plus one'  =&gt; [1, 1, 3]
        ];
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this-&gt;assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return [
            [0, 0, 0],
            [0, 1, 1],
            [1, 0, 1],
            [1, 1, 3]
        ];
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T091212Z" creationid="Wynn" creationdate="20160418T091212Z">
        <seg>&lt;?php
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this-&gt;assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return [
            [0, 0, 0],
            [0, 1, 1],
            [1, 0, 1],
            [1, 1, 3]
        ];
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this-&gt;assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return array(
          'adding zeros' =&gt; array(0, 0, 0),
          'zero plus one' =&gt; array(0, 1, 1),
          'one plus zero' =&gt; array(1, 0, 1),
          'one plus one' =&gt; array(1, 1, 3)
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150817T090951Z" creationid="Wynn" creationdate="20150817T090951Z">
        <seg>&lt;?php
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this-&gt;assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return array(
          'adding zeros' =&gt; array(0, 0, 0),
          'zero plus one' =&gt; array(0, 1, 1),
          'one plus zero' =&gt; array(1, 0, 1),
          'one plus one' =&gt; array(1, 1, 3)
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this-&gt;assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return array(
          array(0, 0, 0),
          array(0, 1, 1),
          array(1, 0, 1),
          array(1, 1, 3)
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T102148Z" creationid="Wynn" creationdate="20150327T102148Z">
        <seg>&lt;?php
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider additionProvider
     */
    public function testAdd($a, $b, $expected)
    {
        $this-&gt;assertEquals($expected, $a + $b);
    }

    public function additionProvider()
    {
        return array(
          array(0, 0, 0),
          array(0, 1, 1),
          array(1, 0, 1),
          array(1, 1, 3)
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider provider
     */
    public function testAdd($a, $b, $c)
    {
        $this-&gt;assertEquals($c, $a + $b);
    }

    public function provider()
    {
        return array(
          array(0, 0, 0),
          array(0, 1, 1),
          array(1, 0, 1),
          array(1, 1, 3)
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T050955Z" creationid="Wynn" creationdate="20150330T050955Z">
        <seg>&lt;?php
class DataTest extends PHPUnit_Framework_TestCase
{
    /**
     * @dataProvider provider
     */
    public function testAdd($a, $b, $c)
    {
        $this-&gt;assertEquals($c, $a + $b);
    }

    public function provider()
    {
        return array(
          array(0, 0, 0),
          array(0, 1, 1),
          array(1, 0, 1),
          array(1, 1, 3)
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        if (!extension_loaded('mysqli')) {
            $this-&gt;markTestSkipped(
              'The MySQLi extension is not available.'
            );
        }
    }

    public function testConnection()
    {
        // ...
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T092153Z" creationid="Wynn" creationdate="20150319T092153Z">
        <seg>&lt;?php
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        if (!extension_loaded('mysqli')) {
            $this-&gt;markTestSkipped(
              'The MySQLi 扩展不可用。'
            );
        }
    }

    public function testConnection()
    {
        // ...
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected static $dbh;

    public static function setUpBeforeClass()
    {
        self::$dbh = new PDO('sqlite::memory:');
    }

    public static function tearDownAfterClass()
    {
        self::$dbh = NULL;
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T082234Z" creationid="Wynn" creationdate="20150319T082234Z">
        <seg>&lt;?php
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected static $dbh;

    public static function setUpBeforeClass()
    {
        self::$dbh = new PDO('sqlite::memory:');
    }

    public static function tearDownAfterClass()
    {
        self::$dbh = NULL;
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected static $dbh;

    public static function setUpBeforeClass()
    {
        self::$dbh = new PDO('sqlite::memory:');
    }

    public static function tearDownAfterClass()
    {
        self::$dbh = null;
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083314Z" creationid="Wynn" creationdate="20160418T083314Z">
        <seg>&lt;?php
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected static $dbh;

    public static function setUpBeforeClass()
    {
        self::$dbh = new PDO('sqlite::memory:');
    }

    public static function tearDownAfterClass()
    {
        self::$dbh = null;
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DependencyAndDataProviderComboTest extends PHPUnit_Framework_TestCase
{
    public function provider()
    {
        return [['provider1'], ['provider2']];
    }

    public function testProducerFirst()
    {
        $this-&gt;assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this-&gt;assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     * @dataProvider provider
     */
    public function testConsumer()
    {
        $this-&gt;assertEquals(
            ['provider1', 'first', 'second'],
            func_get_args()
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T091219Z" creationid="Wynn" creationdate="20160418T091219Z">
        <seg>&lt;?php
class DependencyAndDataProviderComboTest extends PHPUnit_Framework_TestCase
{
    public function provider()
    {
        return [['provider1'], ['provider2']];
    }

    public function testProducerFirst()
    {
        $this-&gt;assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this-&gt;assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     * @dataProvider provider
     */
    public function testConsumer()
    {
        $this-&gt;assertEquals(
            ['provider1', 'first', 'second'],
            func_get_args()
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DependencyAndDataProviderComboTest extends PHPUnit_Framework_TestCase
{
    public function provider()
    {
        return array(array('provider1'), array('provider2'));
    }

    public function testProducerFirst()
    {
        $this-&gt;assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this-&gt;assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     * @dataProvider provider
     */
    public function testConsumer()
    {
        $this-&gt;assertEquals(
            array('provider1', 'first', 'second'),
            func_get_args()
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T102408Z" creationid="Wynn" creationdate="20150327T102408Z">
        <seg>&lt;?php
class DependencyAndDataProviderComboTest extends PHPUnit_Framework_TestCase
{
    public function provider()
    {
        return array(array('provider1'), array('provider2'));
    }

    public function testProducerFirst()
    {
        $this-&gt;assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this-&gt;assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     * @dataProvider provider
     */
    public function testConsumer()
    {
        $this-&gt;assertEquals(
            array('provider1', 'first', 'second'),
            func_get_args()
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DependencyFailureTest extends PHPUnit_Framework_TestCase
{
    public function testOne()
    {
        $this-&gt;assertTrue(FALSE);
    }

    /**
     * @depends testOne
     */
    public function testTwo()
    {
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T101906Z" creationid="Wynn" creationdate="20150327T101906Z">
        <seg>&lt;?php
class DependencyFailureTest extends PHPUnit_Framework_TestCase
{
    public function testOne()
    {
        $this-&gt;assertTrue(FALSE);
    }

    /**
     * @depends testOne
     */
    public function testTwo()
    {
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class DependencyFailureTest extends PHPUnit_Framework_TestCase
{
    public function testOne()
    {
        $this-&gt;assertTrue(false);
    }

    /**
     * @depends testOne
     */
    public function testTwo()
    {
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T091202Z" creationid="Wynn" creationdate="20160418T091202Z">
        <seg>&lt;?php
class DependencyFailureTest extends PHPUnit_Framework_TestCase
{
    public function testOne()
    {
        $this-&gt;assertTrue(false);
    }

    /**
     * @depends testOne
     */
    public function testTwo()
    {
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class EmptyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEmpty(['foo']);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083135Z" creationid="Wynn" creationdate="20160418T083135Z">
        <seg>&lt;?php
class EmptyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEmpty(['foo']);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class EmptyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEmpty(array('foo'));
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092942Z" creationid="Wynn" creationdate="20150309T092942Z">
        <seg>&lt;?php
class EmptyTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEmpty(array('foo'));
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class EqualXMLStructureTest extends PHPUnit_Framework_TestCase
{
    public function testFailureWithDifferentNodeNames()
    {
        $expected = new DOMElement('foo');
        $actual = new DOMElement('bar');

        $this-&gt;assertEqualXMLStructure($expected, $actual);
    }

    public function testFailureWithDifferentNodeAttributes()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo bar="true" /&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo/&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild, TRUE
        );
    }

    public function testFailureWithDifferentChildrenCount()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild
        );
    }

    public function testFailureWithDifferentChildren()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo&gt;&lt;baz/&gt;&lt;baz/&gt;&lt;baz/&gt;&lt;/foo&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T092954Z" creationid="Wynn" creationdate="20150309T092954Z">
        <seg>&lt;?php
class EqualXMLStructureTest extends PHPUnit_Framework_TestCase
{
    public function testFailureWithDifferentNodeNames()
    {
        $expected = new DOMElement('foo');
        $actual = new DOMElement('bar');

        $this-&gt;assertEqualXMLStructure($expected, $actual);
    }

    public function testFailureWithDifferentNodeAttributes()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo bar="true" /&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo/&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild, TRUE
        );
    }

    public function testFailureWithDifferentChildrenCount()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild
        );
    }

    public function testFailureWithDifferentChildren()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo&gt;&lt;baz/&gt;&lt;baz/&gt;&lt;baz/&gt;&lt;/foo&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class EqualXMLStructureTest extends PHPUnit_Framework_TestCase
{
    public function testFailureWithDifferentNodeNames()
    {
        $expected = new DOMElement('foo');
        $actual = new DOMElement('bar');

        $this-&gt;assertEqualXMLStructure($expected, $actual);
    }

    public function testFailureWithDifferentNodeAttributes()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo bar="true" /&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo/&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild, true
        );
    }

    public function testFailureWithDifferentChildrenCount()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild
        );
    }

    public function testFailureWithDifferentChildren()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo&gt;&lt;baz/&gt;&lt;baz/&gt;&lt;baz/&gt;&lt;/foo&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083141Z" creationid="Wynn" creationdate="20160418T083141Z">
        <seg>&lt;?php
class EqualXMLStructureTest extends PHPUnit_Framework_TestCase
{
    public function testFailureWithDifferentNodeNames()
    {
        $expected = new DOMElement('foo');
        $actual = new DOMElement('bar');

        $this-&gt;assertEqualXMLStructure($expected, $actual);
    }

    public function testFailureWithDifferentNodeAttributes()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo bar="true" /&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo/&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild, true
        );
    }

    public function testFailureWithDifferentChildrenCount()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild
        );
    }

    public function testFailureWithDifferentChildren()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;foo&gt;&lt;baz/&gt;&lt;baz/&gt;&lt;baz/&gt;&lt;/foo&gt;');

        $this-&gt;assertEqualXMLStructure(
          $expected-&gt;firstChild, $actual-&gt;firstChild
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;bar&gt;&lt;foo/&gt;&lt;/bar&gt;');

        $this-&gt;assertEquals($expected, $actual);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093028Z" creationid="Wynn" creationdate="20150309T093028Z">
        <seg>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $expected = new DOMDocument;
        $expected-&gt;loadXML('&lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;');

        $actual = new DOMDocument;
        $actual-&gt;loadXML('&lt;bar&gt;&lt;foo/&gt;&lt;/bar&gt;');

        $this-&gt;assertEquals($expected, $actual);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $expected = new stdClass;
        $expected-&gt;foo = 'foo';
        $expected-&gt;bar = 'bar';

        $actual = new stdClass;
        $actual-&gt;foo = 'bar';
        $actual-&gt;baz = 'bar';

        $this-&gt;assertEquals($expected, $actual);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093043Z" creationid="Wynn" creationdate="20150309T093043Z">
        <seg>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $expected = new stdClass;
        $expected-&gt;foo = 'foo';
        $expected-&gt;bar = 'bar';

        $actual = new stdClass;
        $actual-&gt;foo = 'bar';
        $actual-&gt;baz = 'bar';

        $this-&gt;assertEquals($expected, $actual);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEquals(1, 0);
    }

    public function testFailure2()
    {
        $this-&gt;assertEquals('bar', 'baz');
    }

    public function testFailure3()
    {
        $this-&gt;assertEquals("foo\nbar\nbaz\n", "foo\nbah\nbaz\n");
    }

    public function testFailure4()
    {
        $this-&gt;assertEquals("", 0)
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20151222T040949Z" creationid="Wynn" creationdate="20151222T040949Z">
        <seg>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEquals(1, 0);
    }

    public function testFailure2()
    {
        $this-&gt;assertEquals('bar', 'baz');
    }

    public function testFailure3()
    {
        $this-&gt;assertEquals("foo\nbar\nbaz\n", "foo\nbah\nbaz\n");
    }

    public function testFailure4()
    {
        $this-&gt;assertEquals("", 0)
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEquals(1, 0);
    }

    public function testFailure2()
    {
        $this-&gt;assertEquals('bar', 'baz');
    }

    public function testFailure3()
    {
        $this-&gt;assertEquals("foo\nbar\nbaz\n", "foo\nbah\nbaz\n");
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093013Z" creationid="Wynn" creationdate="20150309T093013Z">
        <seg>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEquals(1, 0);
    }

    public function testFailure2()
    {
        $this-&gt;assertEquals('bar', 'baz');
    }

    public function testFailure3()
    {
        $this-&gt;assertEquals("foo\nbar\nbaz\n", "foo\nbah\nbaz\n");
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEquals(['a', 'b', 'c'], ['a', 'c', 'd']);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083143Z" creationid="Wynn" creationdate="20160418T083143Z">
        <seg>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEquals(['a', 'b', 'c'], ['a', 'c', 'd']);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEquals(array('a', 'b', 'c'), array('a', 'c', 'd'));
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093054Z" creationid="Wynn" creationdate="20150309T093054Z">
        <seg>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertEquals(array('a', 'b', 'c'), array('a', 'c', 'd'));
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testSuccess()
    {
        $this-&gt;assertEquals(1.0, 1.1, '', 0.2);
    }

    public function testFailure()
    {
        $this-&gt;assertEquals(1.0, 1.1);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093024Z" creationid="Wynn" creationdate="20150309T093024Z">
        <seg>&lt;?php
class EqualsTest extends PHPUnit_Framework_TestCase
{
    public function testSuccess()
    {
        $this-&gt;assertEquals(1.0, 1.1, '', 0.2);
    }

    public function testFailure()
    {
        $this-&gt;assertEquals(1.0, 1.1);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ErrorSuppressionTest extends PHPUnit_Framework_TestCase
{
    public function testFileWriting() {
        $writer = new FileWriter;
        $this-&gt;assertFalse(@$writer-&gt;write('/is-not-writeable/file', 'stuff'));
    }
}
class FileWriter
{
    public function write($file, $content) {
        $file = fopen($file, 'w');
        if($file == false) {
            return false;
        }
        // ...
    }
}

?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T024330Z" creationid="Wynn" creationdate="20150330T024330Z">
        <seg>&lt;?php
class ErrorSuppressionTest extends PHPUnit_Framework_TestCase
{
    public function testFileWriting() {
        $writer = new FileWriter;
        $this-&gt;assertFalse(@$writer-&gt;write('/is-not-writeable/file', 'stuff'));
    }
}
class FileWriter
{
    public function write($file, $content) {
        $file = fopen($file, 'w');
        if($file == false) {
            return false;
        }
        // ...
    }
}

?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class Example
{
    protected $id;
    protected $directory;

    public function __construct($id)
    {
        $this-&gt;id = $id;
    }

    public function setDirectory($directory)
    {
        $this-&gt;directory = $directory . DIRECTORY_SEPARATOR . $this-&gt;id;

        if (!file_exists($this-&gt;directory)) {
            mkdir($this-&gt;directory, 0700, TRUE);
        }
    }
}?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T091725Z" creationid="Wynn" creationdate="20150327T091725Z">
        <seg>&lt;?php
class Example
{
    protected $id;
    protected $directory;

    public function __construct($id)
    {
        $this-&gt;id = $id;
    }

    public function setDirectory($directory)
    {
        $this-&gt;directory = $directory . DIRECTORY_SEPARATOR . $this-&gt;id;

        if (!file_exists($this-&gt;directory)) {
            mkdir($this-&gt;directory, 0700, TRUE);
        }
    }
}?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class Example
{
    protected $id;
    protected $directory;

    public function __construct($id)
    {
        $this-&gt;id = $id;
    }

    public function setDirectory($directory)
    {
        $this-&gt;directory = $directory . DIRECTORY_SEPARATOR . $this-&gt;id;

        if (!file_exists($this-&gt;directory)) {
            mkdir($this-&gt;directory, 0700, true);
        }
    }
}?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T091122Z" creationid="Wynn" creationdate="20160418T091122Z">
        <seg>&lt;?php
class Example
{
    protected $id;
    protected $directory;

    public function __construct($id)
    {
        $this-&gt;id = $id;
    }

    public function setDirectory($directory)
    {
        $this-&gt;directory = $directory . DIRECTORY_SEPARATOR . $this-&gt;id;

        if (!file_exists($this-&gt;directory)) {
            mkdir($this-&gt;directory, 0700, true);
        }
    }
}?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ExampleTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        if (file_exists(dirname(__FILE__) . '/id')) {
            rmdir(dirname(__FILE__) . '/id');
        }
    }

    public function testDirectoryIsCreated()
    {
        $example = new Example('id');
        $this-&gt;assertFalse(file_exists(dirname(__FILE__) . '/id'));

        $example-&gt;setDirectory(dirname(__FILE__));
        $this-&gt;assertTrue(file_exists(dirname(__FILE__) . '/id'));
    }

    protected function tearDown()
    {
        if (file_exists(dirname(__FILE__) . '/id')) {
            rmdir(dirname(__FILE__) . '/id');
        }
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T091131Z" creationid="Wynn" creationdate="20160418T091131Z">
        <seg>&lt;?php
class ExampleTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        if (file_exists(dirname(__FILE__) . '/id')) {
            rmdir(dirname(__FILE__) . '/id');
        }
    }

    public function testDirectoryIsCreated()
    {
        $example = new Example('id');
        $this-&gt;assertFalse(file_exists(dirname(__FILE__) . '/id'));

        $example-&gt;setDirectory(dirname(__FILE__));
        $this-&gt;assertTrue(file_exists(dirname(__FILE__) . '/id'));
    }

    protected function tearDown()
    {
        if (file_exists(dirname(__FILE__) . '/id')) {
            rmdir(dirname(__FILE__) . '/id');
        }
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ExampleTest extends PHPUnit_Framework_TestCase
{
    public function setUp()
    {
        vfsStreamWrapper::register();
        vfsStreamWrapper::setRoot(new vfsStreamDirectory('exampleDir'));
    }

    public function testDirectoryIsCreated()
    {
        $example = new Example('id');
        $this-&gt;assertFalse(vfsStreamWrapper::getRoot()-&gt;hasChild('id'));

        $example-&gt;setDirectory(vfsStream::url('exampleDir'));
        $this-&gt;assertTrue(vfsStreamWrapper::getRoot()-&gt;hasChild('id'));
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T091138Z" creationid="Wynn" creationdate="20160418T091138Z">
        <seg>&lt;?php
class ExampleTest extends PHPUnit_Framework_TestCase
{
    public function setUp()
    {
        vfsStreamWrapper::register();
        vfsStreamWrapper::setRoot(new vfsStreamDirectory('exampleDir'));
    }

    public function testDirectoryIsCreated()
    {
        $example = new Example('id');
        $this-&gt;assertFalse(vfsStreamWrapper::getRoot()-&gt;hasChild('id'));

        $example-&gt;setDirectory(vfsStream::url('exampleDir'));
        $this-&gt;assertTrue(vfsStreamWrapper::getRoot()-&gt;hasChild('id'));
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException        InvalidArgumentException
     * @expectedExceptionMessage Right Message
     */
    public function testExceptionHasRightMessage()
    {
        throw new InvalidArgumentException('Some Message', 10);
    }

    /**
     * @expectedException              InvalidArgumentException
     * @expectedExceptionMessageRegExp #Right.*#
     */
    public function testExceptionMessageMatchesRegExp()
    {
        throw new InvalidArgumentException('Some Message', 10);
    }

    /**
     * @expectedException     InvalidArgumentException
     * @expectedExceptionCode 20
     */
    public function testExceptionHasRightCode()
    {
        throw new InvalidArgumentException('Some Message', 10);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T102900Z" creationid="Wynn" creationdate="20150327T102900Z">
        <seg>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException        InvalidArgumentException
     * @expectedExceptionMessage Right Message
     */
    public function testExceptionHasRightMessage()
    {
        throw new InvalidArgumentException('Some Message', 10);
    }

    /**
     * @expectedException              InvalidArgumentException
     * @expectedExceptionMessageRegExp #Right.*#
     */
    public function testExceptionMessageMatchesRegExp()
    {
        throw new InvalidArgumentException('Some Message', 10);
    }

    /**
     * @expectedException     InvalidArgumentException
     * @expectedExceptionCode 20
     */
    public function testExceptionHasRightCode()
    {
        throw new InvalidArgumentException('Some Message', 10);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException        InvalidArgumentException
     * @expectedExceptionMessage Right Message
     */
    public function testExceptionHasRightMessage()
    {
        throw new InvalidArgumentException('Some Message', 10);
    }

    /**
     * @expectedException     InvalidArgumentException
     * @expectedExceptionCode 20
     */
    public function testExceptionHasRightCode()
    {
        throw new InvalidArgumentException('Some Message', 10);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T051147Z" creationid="Wynn" creationdate="20150330T051147Z">
        <seg>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException        InvalidArgumentException
     * @expectedExceptionMessage Right Message
     */
    public function testExceptionHasRightMessage()
    {
        throw new InvalidArgumentException('Some Message', 10);
    }

    /**
     * @expectedException     InvalidArgumentException
     * @expectedExceptionCode 20
     */
    public function testExceptionHasRightCode()
    {
        throw new InvalidArgumentException('Some Message', 10);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException InvalidArgumentException
     */
    public function testException()
    {
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T102815Z" creationid="Wynn" creationdate="20150327T102815Z">
        <seg>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException InvalidArgumentException
     */
    public function testException()
    {
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    public function testException()
    {
        $this-&gt;expectException(InvalidArgumentException::class);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160222T013947Z" creationid="Wynn" creationdate="20160222T013947Z">
        <seg>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    public function testException()
    {
        $this-&gt;expectException(InvalidArgumentException::class);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    public function testException()
    {
        $this-&gt;setExpectedException('InvalidArgumentException');
    }

    public function testExceptionHasRightMessage()
    {
        $this-&gt;setExpectedException(
          'InvalidArgumentException', 'Right Message'
        );
        throw new InvalidArgumentException('Some Message', 10);
    }

    public function testExceptionHasRightCode()
    {
        $this-&gt;setExpectedException(
          'InvalidArgumentException', 'Right Message', 20
        );
        throw new InvalidArgumentException('The Right Message', 10);
    }
}?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T051250Z" creationid="Wynn" creationdate="20150330T051250Z">
        <seg>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    public function testException()
    {
        $this-&gt;setExpectedException('InvalidArgumentException');
    }

    public function testExceptionHasRightMessage()
    {
        $this-&gt;setExpectedException(
          'InvalidArgumentException', 'Right Message'
        );
        throw new InvalidArgumentException('Some Message', 10);
    }

    public function testExceptionHasRightCode()
    {
        $this-&gt;setExpectedException(
          'InvalidArgumentException', 'Right Message', 20
        );
        throw new InvalidArgumentException('The Right Message', 10);
    }
}?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    public function testException()
    {
        $this-&gt;setExpectedException('InvalidArgumentException');
    }

    public function testExceptionHasRightMessage()
    {
        $this-&gt;setExpectedException(
          'InvalidArgumentException', 'Right Message'
        );
        throw new InvalidArgumentException('Some Message', 10);
    }

    public function testExceptionMessageMatchesRegExp()
    {
        $this-&gt;setExpectedExceptionRegExp(
          'InvalidArgumentException', '/Right.*/', 10
        );
        throw new InvalidArgumentException('The Wrong Message', 10);
    }

    public function testExceptionHasRightCode()
    {
        $this-&gt;setExpectedException(
          'InvalidArgumentException', 'Right Message', 20
        );
        throw new InvalidArgumentException('The Right Message', 10);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T103108Z" creationid="Wynn" creationdate="20150327T103108Z">
        <seg>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase
{
    public function testException()
    {
        $this-&gt;setExpectedException('InvalidArgumentException');
    }

    public function testExceptionHasRightMessage()
    {
        $this-&gt;setExpectedException(
          'InvalidArgumentException', 'Right Message'
        );
        throw new InvalidArgumentException('Some Message', 10);
    }

    public function testExceptionMessageMatchesRegExp()
    {
        $this-&gt;setExpectedExceptionRegExp(
          'InvalidArgumentException', '/Right.*/', 10
        );
        throw new InvalidArgumentException('The Wrong Message', 10);
    }

    public function testExceptionHasRightCode()
    {
        $this-&gt;setExpectedException(
          'InvalidArgumentException', 'Right Message', 20
        );
        throw new InvalidArgumentException('The Right Message', 10);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase {
    public function testException() {
        try {
            // ... Code that is expected to raise an exception ...
        }

        catch (InvalidArgumentException $expected) {
            return;
        }

        $this-&gt;fail('An expected exception has not been raised.');
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T023944Z" creationid="Wynn" creationdate="20150330T023944Z">
        <seg>&lt;?php
class ExceptionTest extends PHPUnit_Framework_TestCase {
    public function testException() {
        try {
            // ... 预期会引发异常的代码 ...
        }

        catch (InvalidArgumentException $expected) {
            return;
        }

        $this-&gt;fail('预期的异常未出现。');
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class ExpectedErrorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException PHPUnit_Framework_Error
     */
    public function testFailingInclude()
    {
        include 'not_existing_file.php';
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T024138Z" creationid="Wynn" creationdate="20150330T024138Z">
        <seg>&lt;?php
class ExpectedErrorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @expectedException PHPUnit_Framework_Error
     */
    public function testFailingInclude()
    {
        include 'not_existing_file.php';
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class FalseTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertFalse(TRUE);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093101Z" creationid="Wynn" creationdate="20150309T093101Z">
        <seg>&lt;?php
class FalseTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertFalse(TRUE);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class FalseTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertFalse(true);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083154Z" creationid="Wynn" creationdate="20160418T083154Z">
        <seg>&lt;?php
class FalseTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertFalse(true);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class FileEqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertFileEquals('/home/sb/expected', '/home/sb/actual');
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093108Z" creationid="Wynn" creationdate="20150309T093108Z">
        <seg>&lt;?php
class FileEqualsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertFileEquals('/home/sb/expected', '/home/sb/actual');
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class FileExistsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertFileExists('/path/to/file');
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093116Z" creationid="Wynn" creationdate="20150309T093116Z">
        <seg>&lt;?php
class FileExistsTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertFileExists('/path/to/file');
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testFunctionCalledTwoTimesWithSpecificArguments()
    {
        $mock = $this-&gt;getMock('stdClass', array('set'));
        $mock-&gt;expects($this-&gt;exactly(2))
             -&gt;method('set')
             -&gt;withConsecutive(
                 array($this-&gt;equalTo('foo'), $this-&gt;greaterThan(0)),
                 array($this-&gt;equalTo('bar'), $this-&gt;greaterThan(0))
             );

        $mock-&gt;set('foo', 21);
        $mock-&gt;set('bar', 48);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T062847Z" creationid="Wynn" creationdate="20150330T062847Z">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testFunctionCalledTwoTimesWithSpecificArguments()
    {
        $mock = $this-&gt;getMock('stdClass', array('set'));
        $mock-&gt;expects($this-&gt;exactly(2))
             -&gt;method('set')
             -&gt;withConsecutive(
                 array($this-&gt;equalTo('foo'), $this-&gt;greaterThan(0)),
                 array($this-&gt;equalTo('bar'), $this-&gt;greaterThan(0))
             );

        $mock-&gt;set('foo', 21);
        $mock-&gt;set('bar', 48);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testFunctionCalledTwoTimesWithSpecificArguments()
    {
        $mock = $this-&gt;getMockBuilder('stdClass')
                     -&gt;setMethods(array('set'))
                     -&gt;getMock();

        $mock-&gt;expects($this-&gt;exactly(2))
             -&gt;method('set')
             -&gt;withConsecutive(
                 array($this-&gt;equalTo('foo'), $this-&gt;greaterThan(0)),
                 array($this-&gt;equalTo('bar'), $this-&gt;greaterThan(0))
             );

        $mock-&gt;set('foo', 21);
        $mock-&gt;set('bar', 48);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T085825Z" creationid="Wynn" creationdate="20150327T085825Z">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testFunctionCalledTwoTimesWithSpecificArguments()
    {
        $mock = $this-&gt;getMockBuilder('stdClass')
                     -&gt;setMethods(array('set'))
                     -&gt;getMock();

        $mock-&gt;expects($this-&gt;exactly(2))
             -&gt;method('set')
             -&gt;withConsecutive(
                 array($this-&gt;equalTo('foo'), $this-&gt;greaterThan(0)),
                 array($this-&gt;equalTo('bar'), $this-&gt;greaterThan(0))
             );

        $mock-&gt;set('foo', 21);
        $mock-&gt;set('bar', 48);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testFunctionCalledTwoTimesWithSpecificArguments()
    {
        $mock = $this-&gt;getMockBuilder(stdClass::class)
                     -&gt;setMethods(['set'])
                     -&gt;getMock();

        $mock-&gt;expects($this-&gt;exactly(2))
             -&gt;method('set')
             -&gt;withConsecutive(
                 [$this-&gt;equalTo('foo'), $this-&gt;greaterThan(0)],
                 [$this-&gt;equalTo('bar'), $this-&gt;greaterThan(0)]
             );

        $mock-&gt;set('foo', 21);
        $mock-&gt;set('bar', 48);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T090430Z" creationid="Wynn" creationdate="20160418T090430Z">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testFunctionCalledTwoTimesWithSpecificArguments()
    {
        $mock = $this-&gt;getMockBuilder(stdClass::class)
                     -&gt;setMethods(['set'])
                     -&gt;getMock();

        $mock-&gt;expects($this-&gt;exactly(2))
             -&gt;method('set')
             -&gt;withConsecutive(
                 [$this-&gt;equalTo('foo'), $this-&gt;greaterThan(0)],
                 [$this-&gt;equalTo('bar'), $this-&gt;greaterThan(0)]
             );

        $mock-&gt;set('foo', 21);
        $mock-&gt;set('bar', 48);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $cloneArguments = true;

        $mock = $this-&gt;getMock(
            'stdClass',
            array(),
            array(),
            '',
            FALSE,
            TRUE,
            TRUE,
            $cloneArguments
        );

        // or using the mock builder
        $mock = $this-&gt;getMockBuilder('stdClass')
                     -&gt;enableArgumentCloning()
                     -&gt;getMock();

        // now your mock clones parameters so the identicalTo constraint
        // will fail.
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T062506Z" creationid="Wynn" creationdate="20150330T062506Z">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $cloneArguments = true;

        $mock = $this-&gt;getMock(
            'stdClass',
            array(),
            array(),
            '',
            FALSE,
            TRUE,
            TRUE,
            $cloneArguments
        );

        // 或使用仿件构建器
        $mock = $this-&gt;getMockBuilder('stdClass')
                     -&gt;enableArgumentCloning()
                     -&gt;getMock();

        // 现在仿件将对参数进行克隆，因此 identicalTo 约束将会失败。
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $cloneArguments = true;

        $mock = $this-&gt;getMock(
            'stdClass',
            array(),
            array(),
            '',
            FALSE,
            TRUE,
            TRUE,
            $cloneArguments
        );

        // or using the mock builder
        $mock = $this-&gt;getMockBuilder('stdClass')-&gt;enableArgumentCloning()-&gt;getMock();

        // now your mock clones parameters so the identicalTo constraint will fail.
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T045553Z" creationid="Wynn" creationdate="20150330T045553Z">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $cloneArguments = true;

        $mock = $this-&gt;getMock(
            'stdClass',
            array(),
            array(),
            '',
            FALSE,
            TRUE,
            TRUE,
            $cloneArguments
        );

        // 或使用仿件构建器
        $mock = $this-&gt;getMockBuilder('stdClass')-&gt;enableArgumentCloning()-&gt;getMock();

        // 现在仿件将对参数进行克隆，因此 identicalTo 约束将会失败。
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $cloneArguments = true;

        $mock = $this-&gt;getMockBuilder('stdClass')
                     -&gt;enableArgumentCloning()
                     -&gt;getMock();

        // now your mock clones parameters so the identicalTo constraint
        // will fail.
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T090126Z" creationid="Wynn" creationdate="20150327T090126Z">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $cloneArguments = true;

        $mock = $this-&gt;getMockBuilder('stdClass')
                     -&gt;enableArgumentCloning()
                     -&gt;getMock();

        // 现在仿件将对参数进行克隆，因此 identicalTo 约束将会失败。
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $cloneArguments = true;

        $mock = $this-&gt;getMockBuilder(stdClass::class)
                     -&gt;enableArgumentCloning()
                     -&gt;getMock();

        // now your mock clones parameters so the identicalTo constraint
        // will fail.
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T090523Z" creationid="Wynn" creationdate="20160418T090523Z">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $cloneArguments = true;

        $mock = $this-&gt;getMockBuilder(stdClass::class)
                     -&gt;enableArgumentCloning()
                     -&gt;getMock();

        // 现在仿件将对参数进行克隆，因此 identicalTo 约束将会失败。
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $expectedObject = new stdClass;

        $mock = $this-&gt;getMock('stdClass', array('foo'));
        $mock-&gt;expects($this-&gt;once())
             -&gt;method('foo')
             -&gt;with($this-&gt;identicalTo($expectedObject));

        $mock-&gt;foo($expectedObject);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T045504Z" creationid="Wynn" creationdate="20150330T045504Z">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $expectedObject = new stdClass;

        $mock = $this-&gt;getMock('stdClass', array('foo'));
        $mock-&gt;expects($this-&gt;once())
             -&gt;method('foo')
             -&gt;with($this-&gt;identicalTo($expectedObject));

        $mock-&gt;foo($expectedObject);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $expectedObject = new stdClass;

        $mock = $this-&gt;getMockBuilder('stdClass')
                     -&gt;setMethods(array('foo'))
                     -&gt;getMock();

        $mock-&gt;expects($this-&gt;once())
             -&gt;method('foo')
             -&gt;with($this-&gt;identicalTo($expectedObject));

        $mock-&gt;foo($expectedObject);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T090106Z" creationid="Wynn" creationdate="20150327T090106Z">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $expectedObject = new stdClass;

        $mock = $this-&gt;getMockBuilder('stdClass')
                     -&gt;setMethods(array('foo'))
                     -&gt;getMock();

        $mock-&gt;expects($this-&gt;once())
             -&gt;method('foo')
             -&gt;with($this-&gt;identicalTo($expectedObject));

        $mock-&gt;foo($expectedObject);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $expectedObject = new stdClass;

        $mock = $this-&gt;getMockBuilder(stdClass::class)
                     -&gt;setMethods(['foo'])
                     -&gt;getMock();

        $mock-&gt;expects($this-&gt;once())
             -&gt;method('foo')
             -&gt;with($this-&gt;identicalTo($expectedObject));

        $mock-&gt;foo($expectedObject);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T090510Z" creationid="Wynn" creationdate="20160418T090510Z">
        <seg>&lt;?php
class FooTest extends PHPUnit_Framework_TestCase
{
    public function testIdenticalObjectPassed()
    {
        $expectedObject = new stdClass;

        $mock = $this-&gt;getMockBuilder(stdClass::class)
                     -&gt;setMethods(['foo'])
                     -&gt;getMock();

        $mock-&gt;expects($this-&gt;once())
             -&gt;method('foo')
             -&gt;with($this-&gt;identicalTo($expectedObject));

        $mock-&gt;foo($expectedObject);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class GoogleTest extends PHPUnit_Framework_TestCase
{
    public function testSearch()
    {
        $googleSearch = $this-&gt;getMockFromWsdl(
          'GoogleSearch.wsdl', 'GoogleSearch'
        );

        $directoryCategory = new stdClass;
        $directoryCategory-&gt;fullViewableName = '';
        $directoryCategory-&gt;specialEncoding = '';

        $element = new stdClass;
        $element-&gt;summary = '';
        $element-&gt;URL = 'http://www.phpunit.de/';
        $element-&gt;snippet = '...';
        $element-&gt;title = '&lt;b&gt;PHPUnit&lt;/b&gt;';
        $element-&gt;cachedSize = '11k';
        $element-&gt;relatedInformationPresent = TRUE;
        $element-&gt;hostName = 'www.phpunit.de';
        $element-&gt;directoryCategory = $directoryCategory;
        $element-&gt;directoryTitle = '';

        $result = new stdClass;
        $result-&gt;documentFiltering = FALSE;
        $result-&gt;searchComments = '';
        $result-&gt;estimatedTotalResultsCount = 3.9000;
        $result-&gt;estimateIsExact = FALSE;
        $result-&gt;resultElements = array($element);
        $result-&gt;searchQuery = 'PHPUnit';
        $result-&gt;startIndex = 1;
        $result-&gt;endIndex = 1;
        $result-&gt;searchTips = '';
        $result-&gt;directoryCategories = array();
        $result-&gt;searchTime = 0.248822;

        $googleSearch-&gt;expects($this-&gt;any())
                     -&gt;method('doGoogleSearch')
                     -&gt;will($this-&gt;returnValue($result));

        /**
         * $googleSearch-&gt;doGoogleSearch() will now return a stubbed result and
         * the web service's doGoogleSearch() method will not be invoked.
         */
        $this-&gt;assertEquals(
          $result,
          $googleSearch-&gt;doGoogleSearch(
            '00000000000000000000000000000000',
            'PHPUnit',
            0,
            1,
            FALSE,
            '',
            FALSE,
            '',
            '',
            ''
          )
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T062928Z" creationid="Wynn" creationdate="20150330T062928Z">
        <seg>&lt;?php
class GoogleTest extends PHPUnit_Framework_TestCase
{
    public function testSearch()
    {
        $googleSearch = $this-&gt;getMockFromWsdl(
          'GoogleSearch.wsdl', 'GoogleSearch'
        );

        $directoryCategory = new stdClass;
        $directoryCategory-&gt;fullViewableName = '';
        $directoryCategory-&gt;specialEncoding = '';

        $element = new stdClass;
        $element-&gt;summary = '';
        $element-&gt;URL = 'http://www.phpunit.de/';
        $element-&gt;snippet = '...';
        $element-&gt;title = '&lt;b&gt;PHPUnit&lt;/b&gt;';
        $element-&gt;cachedSize = '11k';
        $element-&gt;relatedInformationPresent = TRUE;
        $element-&gt;hostName = 'www.phpunit.de';
        $element-&gt;directoryCategory = $directoryCategory;
        $element-&gt;directoryTitle = '';

        $result = new stdClass;
        $result-&gt;documentFiltering = FALSE;
        $result-&gt;searchComments = '';
        $result-&gt;estimatedTotalResultsCount = 3.9000;
        $result-&gt;estimateIsExact = FALSE;
        $result-&gt;resultElements = array($element);
        $result-&gt;searchQuery = 'PHPUnit';
        $result-&gt;startIndex = 1;
        $result-&gt;endIndex = 1;
        $result-&gt;searchTips = '';
        $result-&gt;directoryCategories = array();
        $result-&gt;searchTime = 0.248822;

        $googleSearch-&gt;expects($this-&gt;any())
                     -&gt;method('doGoogleSearch')
                     -&gt;will($this-&gt;returnValue($result));

        /**
         * $googleSearch-&gt;doGoogleSearch() 将会返回上桩的结果，
         * web 服务的 doGoogleSearch() 方法不会被调用。
         */
        $this-&gt;assertEquals(
          $result,
          $googleSearch-&gt;doGoogleSearch(
            '00000000000000000000000000000000',
            'PHPUnit',
            0,
            1,
            FALSE,
            '',
            FALSE,
            '',
            '',
            ''
          )
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class GoogleTest extends PHPUnit_Framework_TestCase
{
    public function testSearch()
    {
        $googleSearch = $this-&gt;getMockFromWsdl(
          'GoogleSearch.wsdl', 'GoogleSearch'
        );

        $directoryCategory = new stdClass;
        $directoryCategory-&gt;fullViewableName = '';
        $directoryCategory-&gt;specialEncoding = '';

        $element = new stdClass;
        $element-&gt;summary = '';
        $element-&gt;URL = 'http://www.phpunit.de/';
        $element-&gt;snippet = '...';
        $element-&gt;title = '&lt;b&gt;PHPUnit&lt;/b&gt;';
        $element-&gt;cachedSize = '11k';
        $element-&gt;relatedInformationPresent = TRUE;
        $element-&gt;hostName = 'www.phpunit.de';
        $element-&gt;directoryCategory = $directoryCategory;
        $element-&gt;directoryTitle = '';

        $result = new stdClass;
        $result-&gt;documentFiltering = FALSE;
        $result-&gt;searchComments = '';
        $result-&gt;estimatedTotalResultsCount = 378000;
        $result-&gt;estimateIsExact = FALSE;
        $result-&gt;resultElements = array($element);
        $result-&gt;searchQuery = 'PHPUnit';
        $result-&gt;startIndex = 1;
        $result-&gt;endIndex = 1;
        $result-&gt;searchTips = '';
        $result-&gt;directoryCategories = array();
        $result-&gt;searchTime = 0.248822;

        $googleSearch-&gt;expects($this-&gt;any())
                     -&gt;method('doGoogleSearch')
                     -&gt;will($this-&gt;returnValue($result));

        /**
         * $googleSearch-&gt;doGoogleSearch() will now return a stubbed result and
         * the web service's doGoogleSearch() method will not be invoked.
         */
        $this-&gt;assertEquals(
          $result,
          $googleSearch-&gt;doGoogleSearch(
            '00000000000000000000000000000000',
            'PHPUnit',
            0,
            1,
            FALSE,
            '',
            FALSE,
            '',
            '',
            ''
          )
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T045621Z" creationid="Wynn" creationdate="20150330T045621Z">
        <seg>&lt;?php
class GoogleTest extends PHPUnit_Framework_TestCase
{
    public function testSearch()
    {
        $googleSearch = $this-&gt;getMockFromWsdl(
          'GoogleSearch.wsdl', 'GoogleSearch'
        );

        $directoryCategory = new stdClass;
        $directoryCategory-&gt;fullViewableName = '';
        $directoryCategory-&gt;specialEncoding = '';

        $element = new stdClass;
        $element-&gt;summary = '';
        $element-&gt;URL = 'http://www.phpunit.de/';
        $element-&gt;snippet = '...';
        $element-&gt;title = '&lt;b&gt;PHPUnit&lt;/b&gt;';
        $element-&gt;cachedSize = '11k';
        $element-&gt;relatedInformationPresent = TRUE;
        $element-&gt;hostName = 'www.phpunit.de';
        $element-&gt;directoryCategory = $directoryCategory;
        $element-&gt;directoryTitle = '';

        $result = new stdClass;
        $result-&gt;documentFiltering = FALSE;
        $result-&gt;searchComments = '';
        $result-&gt;estimatedTotalResultsCount = 378000;
        $result-&gt;estimateIsExact = FALSE;
        $result-&gt;resultElements = array($element);
        $result-&gt;searchQuery = 'PHPUnit';
        $result-&gt;startIndex = 1;
        $result-&gt;endIndex = 1;
        $result-&gt;searchTips = '';
        $result-&gt;directoryCategories = array();
        $result-&gt;searchTime = 0.248822;

        $googleSearch-&gt;expects($this-&gt;any())
                     -&gt;method('doGoogleSearch')
                     -&gt;will($this-&gt;returnValue($result));

        /**
         * $googleSearch-&gt;doGoogleSearch() 将会返回上桩的结果，
         * web 服务的 doGoogleSearch() 方法不会被调用。
         */
        $this-&gt;assertEquals(
          $result,
          $googleSearch-&gt;doGoogleSearch(
            '00000000000000000000000000000000',
            'PHPUnit',
            0,
            1,
            FALSE,
            '',
            FALSE,
            '',
            '',
            ''
          )
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class GoogleTest extends PHPUnit_Framework_TestCase
{
    public function testSearch()
    {
        $googleSearch = $this-&gt;getMockFromWsdl(
          'GoogleSearch.wsdl', 'GoogleSearch'
        );

        $directoryCategory = new stdClass;
        $directoryCategory-&gt;fullViewableName = '';
        $directoryCategory-&gt;specialEncoding = '';

        $element = new stdClass;
        $element-&gt;summary = '';
        $element-&gt;URL = 'https://phpunit.de/';
        $element-&gt;snippet = '...';
        $element-&gt;title = '&lt;b&gt;PHPUnit&lt;/b&gt;';
        $element-&gt;cachedSize = '11k';
        $element-&gt;relatedInformationPresent = TRUE;
        $element-&gt;hostName = 'phpunit.de';
        $element-&gt;directoryCategory = $directoryCategory;
        $element-&gt;directoryTitle = '';

        $result = new stdClass;
        $result-&gt;documentFiltering = FALSE;
        $result-&gt;searchComments = '';
        $result-&gt;estimatedTotalResultsCount = 3.9000;
        $result-&gt;estimateIsExact = FALSE;
        $result-&gt;resultElements = array($element);
        $result-&gt;searchQuery = 'PHPUnit';
        $result-&gt;startIndex = 1;
        $result-&gt;endIndex = 1;
        $result-&gt;searchTips = '';
        $result-&gt;directoryCategories = array();
        $result-&gt;searchTime = 0.248822;

        $googleSearch-&gt;expects($this-&gt;any())
                     -&gt;method('doGoogleSearch')
                     -&gt;will($this-&gt;returnValue($result));

        /**
         * $googleSearch-&gt;doGoogleSearch() will now return a stubbed result and
         * the web service's doGoogleSearch() method will not be invoked.
         */
        $this-&gt;assertEquals(
          $result,
          $googleSearch-&gt;doGoogleSearch(
            '00000000000000000000000000000000',
            'PHPUnit',
            0,
            1,
            FALSE,
            '',
            FALSE,
            '',
            '',
            ''
          )
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T091350Z" creationid="Wynn" creationdate="20150327T091350Z">
        <seg>&lt;?php
class GoogleTest extends PHPUnit_Framework_TestCase
{
    public function testSearch()
    {
        $googleSearch = $this-&gt;getMockFromWsdl(
          'GoogleSearch.wsdl', 'GoogleSearch'
        );

        $directoryCategory = new stdClass;
        $directoryCategory-&gt;fullViewableName = '';
        $directoryCategory-&gt;specialEncoding = '';

        $element = new stdClass;
        $element-&gt;summary = '';
        $element-&gt;URL = 'https://phpunit.de/';
        $element-&gt;snippet = '...';
        $element-&gt;title = '&lt;b&gt;PHPUnit&lt;/b&gt;';
        $element-&gt;cachedSize = '11k';
        $element-&gt;relatedInformationPresent = TRUE;
        $element-&gt;hostName = 'phpunit.de';
        $element-&gt;directoryCategory = $directoryCategory;
        $element-&gt;directoryTitle = '';

        $result = new stdClass;
        $result-&gt;documentFiltering = FALSE;
        $result-&gt;searchComments = '';
        $result-&gt;estimatedTotalResultsCount = 3.9000;
        $result-&gt;estimateIsExact = FALSE;
        $result-&gt;resultElements = array($element);
        $result-&gt;searchQuery = 'PHPUnit';
        $result-&gt;startIndex = 1;
        $result-&gt;endIndex = 1;
        $result-&gt;searchTips = '';
        $result-&gt;directoryCategories = array();
        $result-&gt;searchTime = 0.248822;

        $googleSearch-&gt;expects($this-&gt;any())
                     -&gt;method('doGoogleSearch')
                     -&gt;will($this-&gt;returnValue($result));

        /**
         * $googleSearch-&gt;doGoogleSearch() 将会返回上桩的结果，
         * web 服务的 doGoogleSearch() 方法不会被调用。
         */
        $this-&gt;assertEquals(
          $result,
          $googleSearch-&gt;doGoogleSearch(
            '00000000000000000000000000000000',
            'PHPUnit',
            0,
            1,
            FALSE,
            '',
            FALSE,
            '',
            '',
            ''
          )
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class GoogleTest extends PHPUnit_Framework_TestCase
{
    public function testSearch()
    {
        $googleSearch = $this-&gt;getMockFromWsdl(
          'GoogleSearch.wsdl', 'GoogleSearch'
        );

        $directoryCategory = new stdClass;
        $directoryCategory-&gt;fullViewableName = '';
        $directoryCategory-&gt;specialEncoding = '';

        $element = new stdClass;
        $element-&gt;summary = '';
        $element-&gt;URL = 'https://phpunit.de/';
        $element-&gt;snippet = '...';
        $element-&gt;title = '&lt;b&gt;PHPUnit&lt;/b&gt;';
        $element-&gt;cachedSize = '11k';
        $element-&gt;relatedInformationPresent = true;
        $element-&gt;hostName = 'phpunit.de';
        $element-&gt;directoryCategory = $directoryCategory;
        $element-&gt;directoryTitle = '';

        $result = new stdClass;
        $result-&gt;documentFiltering = false;
        $result-&gt;searchComments = '';
        $result-&gt;estimatedTotalResultsCount = 3.9000;
        $result-&gt;estimateIsExact = false;
        $result-&gt;resultElements = [$element];
        $result-&gt;searchQuery = 'PHPUnit';
        $result-&gt;startIndex = 1;
        $result-&gt;endIndex = 1;
        $result-&gt;searchTips = '';
        $result-&gt;directoryCategories = [];
        $result-&gt;searchTime = 0.248822;

        $googleSearch-&gt;expects($this-&gt;any())
                     -&gt;method('doGoogleSearch')
                     -&gt;will($this-&gt;returnValue($result));

        /**
         * $googleSearch-&gt;doGoogleSearch() will now return a stubbed result and
         * the web service's doGoogleSearch() method will not be invoked.
         */
        $this-&gt;assertEquals(
          $result,
          $googleSearch-&gt;doGoogleSearch(
            '00000000000000000000000000000000',
            'PHPUnit',
            0,
            1,
            false,
            '',
            false,
            '',
            '',
            ''
          )
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T091116Z" creationid="Wynn" creationdate="20160418T091116Z">
        <seg>&lt;?php
class GoogleTest extends PHPUnit_Framework_TestCase
{
    public function testSearch()
    {
        $googleSearch = $this-&gt;getMockFromWsdl(
          'GoogleSearch.wsdl', 'GoogleSearch'
        );

        $directoryCategory = new stdClass;
        $directoryCategory-&gt;fullViewableName = '';
        $directoryCategory-&gt;specialEncoding = '';

        $element = new stdClass;
        $element-&gt;summary = '';
        $element-&gt;URL = 'https://phpunit.de/';
        $element-&gt;snippet = '...';
        $element-&gt;title = '&lt;b&gt;PHPUnit&lt;/b&gt;';
        $element-&gt;cachedSize = '11k';
        $element-&gt;relatedInformationPresent = true;
        $element-&gt;hostName = 'phpunit.de';
        $element-&gt;directoryCategory = $directoryCategory;
        $element-&gt;directoryTitle = '';

        $result = new stdClass;
        $result-&gt;documentFiltering = false;
        $result-&gt;searchComments = '';
        $result-&gt;estimatedTotalResultsCount = 3.9000;
        $result-&gt;estimateIsExact = false;
        $result-&gt;resultElements = [$element];
        $result-&gt;searchQuery = 'PHPUnit';
        $result-&gt;startIndex = 1;
        $result-&gt;endIndex = 1;
        $result-&gt;searchTips = '';
        $result-&gt;directoryCategories = [];
        $result-&gt;searchTime = 0.248822;

        $googleSearch-&gt;expects($this-&gt;any())
                     -&gt;method('doGoogleSearch')
                     -&gt;will($this-&gt;returnValue($result));

        /**
         * $googleSearch-&gt;doGoogleSearch() 将会返回上桩的结果，
         * web 服务的 doGoogleSearch() 方法不会被调用。
         */
        $this-&gt;assertEquals(
          $result,
          $googleSearch-&gt;doGoogleSearch(
            '00000000000000000000000000000000',
            'PHPUnit',
            0,
            1,
            false,
            '',
            false,
            '',
            '',
            ''
          )
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class GreatThanOrEqualTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertGreaterThanOrEqual(2, 1);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093124Z" creationid="Wynn" creationdate="20150309T093124Z">
        <seg>&lt;?php
class GreatThanOrEqualTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertGreaterThanOrEqual(2, 1);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class GreaterThanTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertGreaterThan(2, 1);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093120Z" creationid="Wynn" creationdate="20150309T093120Z">
        <seg>&lt;?php
class GreaterThanTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertGreaterThan(2, 1);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class GuestbookIntegrationTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @coversNothing
     */
    public function testAddEntry()
    {
        $guestbook = new Guestbook();
        $guestbook-&gt;addEntry("suzy", "Hello world!");

        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable(
            'guestbook', 'SELECT * FROM guestbook'
        );

        $expectedTable = $this-&gt;createFlatXmlDataSet("expectedBook.xml")
                              -&gt;getTable("guestbook");

        $this-&gt;assertTablesEqual($expectedTable, $queryTable);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093404Z" creationid="Wynn" creationdate="20150309T093404Z">
        <seg>&lt;?php
class GuestbookIntegrationTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @coversNothing
     */
    public function testAddEntry()
    {
        $guestbook = new Guestbook();
        $guestbook-&gt;addEntry("suzy", "Hello world!");

        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable(
            'guestbook', 'SELECT * FROM guestbook'
        );

        $expectedTable = $this-&gt;createFlatXmlDataSet("expectedBook.xml")
                              -&gt;getTable("guestbook");

        $this-&gt;assertTablesEqual($expectedTable, $queryTable);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class GuestbookIntegrationTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @coversNothing
     */
    public function testAddEntry()
    {
        $guestbook = new Guestbook();
        $guestbook-&gt;addEntry("suzy", "Hello world!");

        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable(
            'guestbook', 'SELECT * FROM guestbook'
        );
        $expectedTable = $this-&gt;createFlatXmlDataSet("expectedBook.xml")
                              -&gt;getTable("guestbook");
        $this-&gt;assertTablesEqual($expectedTable, $queryTable);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T032716Z" creationid="Wynn" creationdate="20150330T032716Z">
        <seg>&lt;?php
class GuestbookIntegrationTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @coversNothing
     */
    public function testAddEntry()
    {
        $guestbook = new Guestbook();
        $guestbook-&gt;addEntry("suzy", "Hello world!");

        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable(
            'guestbook', 'SELECT * FROM guestbook'
        );
        $expectedTable = $this-&gt;createFlatXmlDataSet("expectedBook.xml")
                              -&gt;getTable("guestbook");
        $this-&gt;assertTablesEqual($expectedTable, $queryTable);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class GuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testAddEntry()
    {
        $guestbook = new Guestbook();
        $guestbook-&gt;addEntry("suzy", "Hello world!");

        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable(
            'guestbook', 'SELECT * FROM guestbook'
        );
        $expectedTable = $this-&gt;createFlatXmlDataSet("expectedBook.xml")
                              -&gt;getTable("guestbook");
        $this-&gt;assertTablesEqual($expectedTable, $queryTable);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T024343Z" creationid="Wynn" creationdate="20150319T024343Z">
        <seg>&lt;?php
class GuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testAddEntry()
    {
        $guestbook = new Guestbook();
        $guestbook-&gt;addEntry("suzy", "Hello world!");

        $queryTable = $this-&gt;getConnection()-&gt;createQueryTable(
            'guestbook', 'SELECT * FROM guestbook'
        );
        $expectedTable = $this-&gt;createFlatXmlDataSet("expectedBook.xml")
                              -&gt;getTable("guestbook");
        $this-&gt;assertTablesEqual($expectedTable, $queryTable);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class GuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testAddEntry()
    {
        $this-&gt;assertEquals(2, $this-&gt;getConnection()-&gt;getRowCount('guestbook'), "Pre-Condition");

        $guestbook = new Guestbook();
        $guestbook-&gt;addEntry("suzy", "Hello world!");

        $this-&gt;assertEquals(3, $this-&gt;getConnection()-&gt;getRowCount('guestbook'), "Inserting failed");
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150319T023701Z" creationid="Wynn" creationdate="20150319T023701Z">
        <seg>&lt;?php
class GuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    public function testAddEntry()
    {
        $this-&gt;assertEquals(2, $this-&gt;getConnection()-&gt;getRowCount('guestbook'), "Pre-Condition");

        $guestbook = new Guestbook();
        $guestbook-&gt;addEntry("suzy", "Hello world!");

        $this-&gt;assertEquals(3, $this-&gt;getConnection()-&gt;getRowCount('guestbook'), "Inserting failed");
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class InfiniteTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertInfinite(1);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150706T080006Z" creationid="Wynn" creationdate="20150706T080006Z">
        <seg>&lt;?php
class InfiniteTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertInfinite(1);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class InstanceOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertInstanceOf('RuntimeException', new Exception);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093129Z" creationid="Wynn" creationdate="20150309T093129Z">
        <seg>&lt;?php
class InstanceOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertInstanceOf('RuntimeException', new Exception);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class InstanceOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertInstanceOf(RuntimeException::class, new Exception);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083156Z" creationid="Wynn" creationdate="20160418T083156Z">
        <seg>&lt;?php
class InstanceOfTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertInstanceOf(RuntimeException::class, new Exception);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class InternalTypeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertInternalType('string', 42);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093133Z" creationid="Wynn" creationdate="20150309T093133Z">
        <seg>&lt;?php
class InternalTypeTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertInternalType('string', 42);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class JsonFileEqualsJsonFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertJsonFileEqualsJsonFile(
          'path/to/fixture/file', 'path/to/actual/file');
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093136Z" creationid="Wynn" creationdate="20150309T093136Z">
        <seg>&lt;?php
class JsonFileEqualsJsonFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertJsonFileEqualsJsonFile(
          'path/to/fixture/file', 'path/to/actual/file');
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class JsonStringEqualsJsonFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertJsonStringEqualsJsonFile(
            'path/to/fixture/file', json_encode(['Mascott' =&gt; 'ux'])
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083200Z" creationid="Wynn" creationdate="20160418T083200Z">
        <seg>&lt;?php
class JsonStringEqualsJsonFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertJsonStringEqualsJsonFile(
            'path/to/fixture/file', json_encode(['Mascott' =&gt; 'ux'])
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class JsonStringEqualsJsonFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertJsonStringEqualsJsonFile(
          'path/to/fixture/file', json_encode(array("Mascott" =&gt; "ux"))
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093141Z" creationid="Wynn" creationdate="20150309T093141Z">
        <seg>&lt;?php
class JsonStringEqualsJsonFileTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertJsonStringEqualsJsonFile(
          'path/to/fixture/file', json_encode(array("Mascott" =&gt; "ux"))
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class JsonStringEqualsJsonStringTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertJsonStringEqualsJsonString(
            json_encode(['Mascott' =&gt; 'Tux']),
            json_encode(['Mascott' =&gt; 'ux'])
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083202Z" creationid="Wynn" creationdate="20160418T083202Z">
        <seg>&lt;?php
class JsonStringEqualsJsonStringTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertJsonStringEqualsJsonString(
            json_encode(['Mascott' =&gt; 'Tux']),
            json_encode(['Mascott' =&gt; 'ux'])
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class JsonStringEqualsJsonStringTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertJsonStringEqualsJsonString(
          json_encode(array("Mascott" =&gt; "Tux")), json_encode(array("Mascott" =&gt; "ux"))
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093144Z" creationid="Wynn" creationdate="20150309T093144Z">
        <seg>&lt;?php
class JsonStringEqualsJsonStringTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertJsonStringEqualsJsonString(
          json_encode(array("Mascott" =&gt; "Tux")), json_encode(array("Mascott" =&gt; "ux"))
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class LessThanOrEqualTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertLessThanOrEqual(1, 2);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093153Z" creationid="Wynn" creationdate="20150309T093153Z">
        <seg>&lt;?php
class LessThanOrEqualTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertLessThanOrEqual(1, 2);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class LessThanTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertLessThan(1, 2);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150309T093150Z" creationid="Wynn" creationdate="20150309T093150Z">
        <seg>&lt;?php
class LessThanTest extends PHPUnit_Framework_TestCase
{
    public function testFailure()
    {
        $this-&gt;assertLessThan(1, 2);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class LongArrayDiffTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2,  3, 4, 5, 6],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 33, 4, 5, 6]
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T091226Z" creationid="Wynn" creationdate="20160418T091226Z">
        <seg>&lt;?php
class LongArrayDiffTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2,  3, 4, 5, 6],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 33, 4, 5, 6]
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class LongArrayDiffTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            array(0,0,0,0,0,0,0,0,0,0,0,0,1,2,3 ,4,5,6),
            array(0,0,0,0,0,0,0,0,0,0,0,0,1,2,33,4,5,6)
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150330T025012Z" creationid="Wynn" creationdate="20150330T025012Z">
        <seg>&lt;?php
class LongArrayDiffTest extends PHPUnit_Framework_TestCase
{
    public function testEquality() {
        $this-&gt;assertEquals(
            array(0,0,0,0,0,0,0,0,0,0,0,0,1,2,3 ,4,5,6),
            array(0,0,0,0,0,0,0,0,0,0,0,0,1,2,33,4,5,6)
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class MultipleDependenciesTest extends PHPUnit_Framework_TestCase
{
    public function testProducerFirst()
    {
        $this-&gt;assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this-&gt;assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     */
    public function testConsumer()
    {
        $this-&gt;assertEquals(
            ['first', 'second'],
            func_get_args()
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T091209Z" creationid="Wynn" creationdate="20160418T091209Z">
        <seg>&lt;?php
class MultipleDependenciesTest extends PHPUnit_Framework_TestCase
{
    public function testProducerFirst()
    {
        $this-&gt;assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this-&gt;assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     */
    public function testConsumer()
    {
        $this-&gt;assertEquals(
            ['first', 'second'],
            func_get_args()
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class MultipleDependenciesTest extends PHPUnit_Framework_TestCase
{
    public function testProducerFirst()
    {
        $this-&gt;assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this-&gt;assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     */
    public function testConsumer()
    {
        $this-&gt;assertEquals(
            array('first', 'second'),
            func_get_args()
        );
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150327T102005Z" creationid="Wynn" creationdate="20150327T102005Z">
        <seg>&lt;?php
class MultipleDependenciesTest extends PHPUnit_Framework_TestCase
{
    public function testProducerFirst()
    {
        $this-&gt;assertTrue(true);
        return 'first';
    }

    public function testProducerSecond()
    {
        $this-&gt;assertTrue(true);
        return 'second';
    }

    /**
     * @depends testProducerFirst
     * @depends testProducerSecond
     */
    public function testConsumer()
    {
        $this-&gt;assertEquals(
            array('first', 'second'),
            func_get_args()
        );
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class MyApp_DbUnit_ArrayDataSet extends PHPUnit_Extensions_Database_DataSet_AbstractDataSet
{
    /**
     * @var array
     */
    protected $tables = [];

    /**
     * @param array $data
     */
    public function __construct(array $data)
    {
        foreach ($data AS $tableName =&gt; $rows) {
            $columns = [];
            if (isset($rows[0])) {
                $columns = array_keys($rows[0]);
            }

            $metaData = new PHPUnit_Extensions_Database_DataSet_DefaultTableMetaData($tableName, $columns);
            $table = new PHPUnit_Extensions_Database_DataSet_DefaultTable($metaData);

            foreach ($rows AS $row) {
                $table-&gt;addRow($row);
            }
            $this-&gt;tables[$tableName] = $table;
        }
    }

    protected function createIterator($reverse = false)
    {
        return new PHPUnit_Extensions_Database_DataSet_DefaultTableIterator($this-&gt;tables, $reverse);
    }

    public function getTable($tableName)
    {
        if (!isset($this-&gt;tables[$tableName])) {
            throw new InvalidArgumentException("$tableName is not a table in the current database.");
        }

        return $this-&gt;tables[$tableName];
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083302Z" creationid="Wynn" creationdate="20160418T083302Z">
        <seg>&lt;?php
class MyApp_DbUnit_ArrayDataSet extends PHPUnit_Extensions_Database_DataSet_AbstractDataSet
{
    /**
     * @var array
     */
    protected $tables = [];

    /**
     * @param array $data
     */
    public function __construct(array $data)
    {
        foreach ($data AS $tableName =&gt; $rows) {
            $columns = [];
            if (isset($rows[0])) {
                $columns = array_keys($rows[0]);
            }

            $metaData = new PHPUnit_Extensions_Database_DataSet_DefaultTableMetaData($tableName, $columns);
            $table = new PHPUnit_Extensions_Database_DataSet_DefaultTable($metaData);

            foreach ($rows AS $row) {
                $table-&gt;addRow($row);
            }
            $this-&gt;tables[$tableName] = $table;
        }
    }

    protected function createIterator($reverse = false)
    {
        return new PHPUnit_Extensions_Database_DataSet_DefaultTableIterator($this-&gt;tables, $reverse);
    }

    public function getTable($tableName)
    {
        if (!isset($this-&gt;tables[$tableName])) {
            throw new InvalidArgumentException("$tableName is not a table in the current database.");
        }

        return $this-&gt;tables[$tableName];
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class MyApp_DbUnit_ArrayDataSet extends PHPUnit_Extensions_Database_DataSet_AbstractDataSet
{
    /**
     * @var array
     */
    protected $tables = array();

    /**
     * @param array $data
     */
    public function __construct(array $data)
    {
        foreach ($data AS $tableName =&gt; $rows) {
            $columns = array();
            if (isset($rows[0])) {
                $columns = array_keys($rows[0]);
            }

            $metaData = new PHPUnit_Extensions_Database_DataSet_DefaultTableMetaData($tableName, $columns);
            $table = new PHPUnit_Extensions_Database_DataSet_DefaultTable($metaData);

            foreach ($rows AS $row) {
                $table-&gt;addRow($row);
            }
            $this-&gt;tables[$tableName] = $table;
        }
    }

    protected function createIterator($reverse = FALSE)
    {
        return new PHPUnit_Extensions_Database_DataSet_DefaultTableIterator($this-&gt;tables, $reverse);
    }

    public function getTable($tableName)
    {
        if (!isset($this-&gt;tables[$tableName])) {
            throw new InvalidArgumentException("$tableName is not a table in the current database.");
        }

        return $this-&gt;tables[$tableName];
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150317T074700Z" creationid="Wynn" creationdate="20150317T074700Z">
        <seg>&lt;?php
class MyApp_DbUnit_ArrayDataSet extends PHPUnit_Extensions_Database_DataSet_AbstractDataSet
{
    /**
     * @var array
     */
    protected $tables = array();

    /**
     * @param array $data
     */
    public function __construct(array $data)
    {
        foreach ($data AS $tableName =&gt; $rows) {
            $columns = array();
            if (isset($rows[0])) {
                $columns = array_keys($rows[0]);
            }

            $metaData = new PHPUnit_Extensions_Database_DataSet_DefaultTableMetaData($tableName, $columns);
            $table = new PHPUnit_Extensions_Database_DataSet_DefaultTable($metaData);

            foreach ($rows AS $row) {
                $table-&gt;addRow($row);
            }
            $this-&gt;tables[$tableName] = $table;
        }
    }

    protected function createIterator($reverse = FALSE)
    {
        return new PHPUnit_Extensions_Database_DataSet_DefaultTableIterator($this-&gt;tables, $reverse);
    }

    public function getTable($tableName)
    {
        if (!isset($this-&gt;tables[$tableName])) {
            throw new InvalidArgumentException("$tableName is not a table in the current database.");
        }

        return $this-&gt;tables[$tableName];
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class MyGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
     */
    public function getConnection()
    {
        $pdo = new PDO('sqlite::memory:');
        return $this-&gt;createDefaultDBConnection($pdo, ':memory:');
    }

    /**
     * @return PHPUnit_Extensions_Database_DataSet_IDataSet
     */
    public function getDataSet()
    {
        return $this-&gt;createFlatXMLDataSet(dirname(__FILE__).'/_files/guestbook-seed.xml');
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150316T094711Z" creationid="Wynn" creationdate="20150316T094711Z">
        <seg>&lt;?php
class MyGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
     */
    public function getConnection()
    {
        $pdo = new PDO('sqlite::memory:');
        return $this-&gt;createDefaultDBConnection($pdo, ':memory:');
    }

    /**
     * @return PHPUnit_Extensions_Database_DataSet_IDataSet
     */
    public function getDataSet()
    {
        return $this-&gt;createFlatXMLDataSet(dirname(__FILE__).'/_files/guestbook-seed.xml');
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class MySqlGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
     */
    public function getConnection()
    {
        $database = 'my_database';
        $user = 'my_user';
        $password = 'my_password';
        $pdo = new PDO('mysql:...', $user, $password);
        return $this-&gt;createDefaultDBConnection($pdo, $database);
    }

    public function testGuestbook()
    {
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();
        // ...
    }

    public function testFilteredGuestbook()
    {
        $tableNames = ['guestbook'];
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet($tableNames);
        // ...
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20160418T083303Z" creationid="Wynn" creationdate="20160418T083303Z">
        <seg>&lt;?php
class MySqlGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
     */
    public function getConnection()
    {
        $database = 'my_database';
        $user = 'my_user';
        $password = 'my_password';
        $pdo = new PDO('mysql:...', $user, $password);
        return $this-&gt;createDefaultDBConnection($pdo, $database);
    }

    public function testGuestbook()
    {
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();
        // ...
    }

    public function testFilteredGuestbook()
    {
        $tableNames = ['guestbook'];
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet($tableNames);
        // ...
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class MySqlGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
     */
    public function getConnection()
    {
        $database = 'my_database';
        $user = 'my_user';
        $password = 'my_password';
        $pdo = new PDO('mysql:...', $user, $password);
        return $this-&gt;createDefaultDBConnection($pdo, $database);
    }

    public function testGuestbook()
    {
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();
        // ...
    }

    public function testFilteredGuestbook()
    {
        $tableNames = array('guestbook');
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet($tableNames);
        // ...
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150317T075032Z" creationid="Wynn" creationdate="20150317T075032Z">
        <seg>&lt;?php
class MySqlGuestbookTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
     */
    public function getConnection()
    {
        $database = 'my_database';
        $user = 'my_user';
        $password = 'my_password';
        $pdo = new PDO('mysql:...', $user, $password);
        return $this-&gt;createDefaultDBConnection($pdo, $database);
    }

    public function testGuestbook()
    {
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet();
        // ...
    }

    public function testFilteredGuestbook()
    {
        $tableNames = array('guestbook');
        $dataSet = $this-&gt;getConnection()-&gt;createDataSet($tableNames);
        // ...
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class MyTest extends PHPUnit_Framework_TestCase
{
    public function testCalculate()
    {
        $this-&gt;assertEquals(2, 1 + 1);
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150316T094513Z" creationid="Wynn" creationdate="20150316T094513Z">
        <seg>&lt;?php
class MyTest extends PHPUnit_Framework_TestCase
{
    public function testCalculate()
    {
        $this-&gt;assertEquals(2, 1 + 1);
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class MyTestCase extends PHPUnit_Extensions_Database_TestCase
{
    public function getDataSet()
    {
        return $this-&gt;createFlatXmlDataSet('myFlatXmlFixture.xml');
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150317T072502Z" creationid="Wynn" creationdate="20150317T072502Z">
        <seg>&lt;?php
class MyTestCase extends PHPUnit_Extensions_Database_TestCase
{
    public function getDataSet()
    {
        return $this-&gt;createFlatXmlDataSet('myFlatXmlFixture.xml');
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;?php
class MyTestCase extends PHPUnit_Extensions_Database_TestCase
{
    public function getDataSet()
    {
        return $this-&gt;createMySQLXMLDataSet('/path/to/file.xml');
    }
}
?&gt;</seg>
      </tuv>
      <tuv lang="ZH-CN" changeid="Wynn" changedate="20150317T074216Z" creationid="Wynn" creationdate="20150317T074216Z">
        <seg>&lt;?php
class MyTestCase extends PHPUnit_Extensions_Database_TestCase
{
    public function getDataSet()
    {
        return $this-&gt;createMySQLXMLDataSet('/path/to/file.xml');
    }
}
?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&l